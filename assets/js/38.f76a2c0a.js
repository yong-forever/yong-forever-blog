(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{364:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"jvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[t._v("#")]),t._v(" JVM")]),t._v(" "),a("h2",{attrs:{id:"jvm探究"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm探究"}},[t._v("#")]),t._v(" JVM探究")]),t._v(" "),a("ul",[a("li",[t._v("请谈谈你对JVM的理解？java8虚拟机和之前的变化更新？")]),t._v(" "),a("li",[t._v("什么是OOM，什么是栈溢出StackOverFlowError?怎么分析？")]),t._v(" "),a("li",[t._v("JVM的常用调优参数有哪些？")]),t._v(" "),a("li",[t._v("内存快照如何抓取，怎么分析Dump文件？")]),t._v(" "),a("li",[t._v("谈谈JVM中，类加载器你的认识？")])]),t._v(" "),a("h2",{attrs:{id:"jvm堆内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm堆内存"}},[t._v("#")]),t._v(" JVM堆内存")]),t._v(" "),a("p",[t._v("​\t\tJVM内存结构主要有三大块："),a("strong",[t._v("堆内存")]),t._v("、"),a("strong",[t._v("方法区")]),t._v("和"),a("strong",[t._v("栈")]),t._v("。堆内存是JVM中最大的一块由年轻代和老年代组成，而年轻代内存又被分成三部分，"),a("strong",[t._v("Eden空间")]),t._v("、"),a("strong",[t._v("From Survivor空间")]),t._v("、"),a("strong",[t._v("To Survivor空间")]),t._v(",默认情况下年轻代按照"),a("strong",[t._v("8:1:1")]),t._v("的比例来分配；")]),t._v(" "),a("p",[t._v("​\t\t方法区存储类信息、常量、静态变量等数据，是线程共享的区域，为与Java堆区分，方法区还有一个别名Non-Heap(非堆)；栈又分为java虚拟机栈和本地方法栈主要用于方法的执行。")]),t._v(" "),a("h3",{attrs:{id:"新生区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新生区"}},[t._v("#")]),t._v(" 新生区")]),t._v(" "),a("p",[a("strong",[t._v("跟士兵一样，没有被回收的会进入下一个阶段")])]),t._v(" "),a("ul",[a("li",[t._v("类诞生和成长的地方，甚至死亡")]),t._v(" "),a("li",[t._v("伊甸园（"),a("strong",[t._v("Eden")]),t._v("）：所有的对象都是在伊甸园区new出来的")]),t._v(" "),a("li",[t._v("幸存者1区（"),a("strong",[t._v("From Survivor")]),t._v("）：")]),t._v(" "),a("li",[t._v("幸存者2区（"),a("strong",[t._v("To Survivor")]),t._v("）：")])]),t._v(" "),a("h3",{attrs:{id:"老年区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#老年区"}},[t._v("#")]),t._v(" 老年区")]),t._v(" "),a("p",[t._v("1.**大对象：**所谓的大对象是指需要大量连续内存空间的java对象，最典型的大对象就是那种很长的字符串以及数组，大对象对虚拟机的内存分配就是坏消息，尤其是一些朝生夕灭的短命大对象，写程序时应避免。")]),t._v(" "),a("p",[t._v("2."),a("strong",[t._v("长期存活的对象")]),t._v("：虚拟机给每个对象定义了一个对象年龄(Age)计数器，如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1,。对象在Survivor区中每熬过一次Minor GC，年龄就增加1，当他的年龄增加到一定程度(默认是15岁)， 就将会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数-XX:MaxTenuringThreshold设置。")]),t._v(" "),a("p",[t._v("3.**动态对象年龄判定：**为了能更好地适应不同程度的内存状况，虚拟机并不是永远地要求对象的年龄必须达到了MaxTenuringThreshold才能晋升到老年代，如果在Survivor空间中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。")]),t._v(" "),a("p",[a("strong",[t._v("99%的对象都是临时对象！")])]),t._v(" "),a("h3",{attrs:{id:"永久区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#永久区"}},[t._v("#")]),t._v(" 永久区")]),t._v(" "),a("ul",[a("li",[t._v("jdk1.6之前：被称之为永久代，常量池在方法区")]),t._v(" "),a("li",[t._v("jdk1.7       ：被称之为永久代，但是慢慢退化了"),a("code",[t._v("去永久代")]),t._v(",常量池在堆中")]),t._v(" "),a("li",[t._v("jkd1.8之后：无永久代，常量池在元空间")])]),t._v(" "),a("p",[t._v("​\t\t这个区域常驻内存的。用来存放JDK自神携带的Class对象。interface元数据，储存的是java运行时的一些环境或类信息~，这个区域不存在垃圾回收！关闭VM虚拟机就会释放这个区域的内存")]),t._v(" "),a("p",[t._v("​\t\tJava虚拟机规范对这个区域的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的")]),t._v(" "),a("p",[t._v("如下可能OOM：")]),t._v(" "),a("ol",[a("li",[t._v("一个启动类，加载了大量的第三方jar包。")]),t._v(" "),a("li",[t._v("Tomcat部署了太多的应用")]),t._v(" "),a("li",[t._v("大量动态生成的反射类不断被加载")])]),t._v(" "),a("p",[a("strong",[t._v("元空间逻辑上存在，物理上不存在，它使用的是本地内存")])]),t._v(" "),a("p",[t._v("在一个项目中，突然出现OOM故障，那么该如何排除~研究为什么出错~")]),t._v(" "),a("ul",[a("li",[t._v("能够看到代码第几行出错：内存快照分析工具。（MAT，Jprofiler）")]),t._v(" "),a("li",[t._v("Debug，一行行分析代码")])]),t._v(" "),a("p",[t._v("MAT，Jprofiler作用:")]),t._v(" "),a("ul",[a("li",[t._v("分析Dump内存文件，快速定位内存泄漏")]),t._v(" "),a("li",[t._v("获得堆中数据")]),t._v(" "),a("li",[t._v("获得大的对象等等")])]),t._v(" "),a("p",[a("a",{attrs:{href:""}},[t._v("Jprofiler下载地址")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("JVM的位置")])]),t._v(" "),a("li",[a("p",[t._v("JVM的体系结构"),a("img",{attrs:{src:"img\\JVM体系结构.png"}})])]),t._v(" "),a("li",[a("p",[t._v("类加载器")]),t._v(" "),a("p",[t._v("作用：加载Class文件~")])]),t._v(" "),a("li",[a("p",[t._v("双亲委派机制")])]),t._v(" "),a("li",[a("p",[t._v("沙箱安全机制")])]),t._v(" "),a("li",[a("p",[t._v("Native")])]),t._v(" "),a("li",[a("p",[t._v("PC寄存器")])]),t._v(" "),a("li",[a("p",[t._v("方法区")])]),t._v(" "),a("li",[a("p",[t._v("栈")])]),t._v(" "),a("li",[a("p",[t._v("三种JVM")])]),t._v(" "),a("li",[a("p",[t._v("堆")])]),t._v(" "),a("li",[a("p",[t._v("新生区")])]),t._v(" "),a("li",[a("p",[t._v("老年区")])]),t._v(" "),a("li",[a("p",[t._v("永久区")])]),t._v(" "),a("li",[a("p",[t._v("内存调优")])]),t._v(" "),a("li",[a("p",[t._v("GC")]),t._v(" "),a("ol",[a("li",[t._v("常用算法")])])]),t._v(" "),a("li",[a("p",[t._v("JMM")])])]),t._v(" "),a("h2",{attrs:{id:"双亲委派机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[t._v("#")]),t._v(" 双亲委派机制")]),t._v(" "),a("h3",{attrs:{id:"类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[t._v("#")]),t._v(" 类加载器")]),t._v(" "),a("p",[a("strong",[t._v("BootstrapClassLoader（启动类加载器）")])]),t._v(" "),a("p",[a("code",[t._v("c++")]),t._v("编写，加载"),a("code",[t._v("java")]),t._v("核心库 "),a("code",[t._v("java.*")]),t._v(",构造"),a("code",[t._v("ExtClassLoader")]),t._v("和"),a("code",[t._v("AppClassLoader")]),t._v("。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作")]),t._v(" "),a("p",[a("strong",[t._v("ExtClassLoader （标准扩展类加载器）")])]),t._v(" "),a("p",[a("code",[t._v("java")]),t._v("编写，加载扩展库，如"),a("code",[t._v("classpath")]),t._v("中的"),a("code",[t._v("jre")]),t._v(" ，"),a("code",[t._v("javax.*")]),t._v("或者\n"),a("code",[t._v("java.ext.dir")]),t._v(" 指定位置中的类，开发者可以直接使用标准扩展类加载器。")]),t._v(" "),a("p",[a("strong",[t._v("AppClassLoader（系统类加载器）")])]),t._v(" "),a("p",[a("code",[t._v("java")]),t._v("编写，加载程序所在的目录，如"),a("code",[t._v("user.dir")]),t._v("所在的位置的"),a("code",[t._v("class")])]),t._v(" "),a("p",[a("strong",[t._v("CustomClassLoader（用户自定义类加载器")]),t._v("）")]),t._v(" "),a("p",[a("code",[t._v("java")]),t._v("编写,用户自定义的类加载器,可加载指定路径的"),a("code",[t._v("class")]),t._v("文件。")]),t._v(" "),a("h4",{attrs:{id:"代码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码分析"}},[t._v("#")]),t._v(" 代码分析")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//我们自己编写的String类,于自带的String相同")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoaderTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoaderTest")]),t._v(" test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoaderTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前类加载器是AppClassLoader()")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父加载器是ExtClassLoader")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ExtClassLoader的父加载器是null, 也就是BootStrap")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这是由c语言实现的（因为调用不到所有为null）")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里使用的是我们编写的String类")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最终使用的类加载器是BootStrap，使用的是其里面的String类")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果为NULL,使用的是BootStrap类加载器")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出结果不是test，而是null")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("h4",{attrs:{id:"流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程"}},[t._v("#")]),t._v(" 流程")]),t._v(" "),a("ol",[a("li",[t._v("类加载器收到类加载的请求")]),t._v(" "),a("li",[t._v("将这个请求向上委托给父加载器去完成，一直向上委托，直到启动类加载器")]),t._v(" "),a("li",[t._v("启动类加载器检查是否能加载这个类，能加载就加载，使用当前的加载器，否则抛出异常，通知子加载器进行加载")]),t._v(" "),a("li",[t._v("重复步骤 3")])]),t._v(" "),a("h4",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),a("ol",[a("li",[t._v("防止重复加载同一个"),a("code",[t._v(".class")]),t._v("。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全.")]),t._v(" "),a("li",[t._v("保证核心"),a("code",[t._v(".class")]),t._v("不能被篡改。通过委托方式，不会去篡改核心"),a("code",[t._v(".clas")]),t._v("，即使篡改也不会去加载，即使加载也不会是同一个"),a("code",[t._v(".class")]),t._v("对象了。不同的加载器加载同一个"),a("code",[t._v(".class")]),t._v("也不是同一个"),a("code",[t._v("Class")]),t._v("对象。这样保证了"),a("code",[t._v("Class")]),t._v("执行安全。")])]),t._v(" "),a("h2",{attrs:{id:"沙箱安全机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#沙箱安全机制"}},[t._v("#")]),t._v(" 沙箱安全机制")]),t._v(" "),a("h3",{attrs:{id:"什么是沙箱安全机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是沙箱安全机制"}},[t._v("#")]),t._v(" 什么是沙箱安全机制")]),t._v(" "),a("p",[t._v("​\t\tjava安全模型的核心就是java沙箱（sandbox），什么是沙箱？沙箱是一个限制程序运行的环境。沙箱机制就是"),a("strong",[t._v("将java代码限定在虚拟机（JVM）特定的运行范围中，并且严格限制代码对本地系统资源访问")]),t._v("，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。"),a("strong",[t._v("沙箱主要限制系统资源访问")]),t._v("，那系统包括什么？"),a("strong",[t._v("CPU、内存、文件系统、网络")]),t._v("。不同级别的沙箱对这些资源访问的限制也不一样。")]),t._v(" "),a("h3",{attrs:{id:"java中的安全模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中的安全模型"}},[t._v("#")]),t._v(" java中的安全模型：")]),t._v(" "),a("p",[t._v("在Java中将执行程序分成本地代码和远程代码两种，本地代码默认视为可信任的，而远程代码则被看作是不受信的。对于授信的本地代码，可以访问一切本地资源。而对于非授信的远程代码在早期的Java实现中，安全依赖于沙箱 (Sandbox) 机制。如下图所示 JDK1.0安全模型\n"),a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E6%B2%99%E7%AE%B1%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B61-1639131670193.png",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("但如此严格的安全机制也给程序的功能扩展带来障碍，比如当用户希望远程代码访问本地系统的文件时候，就无法实现。因此在后续的 Java1.1 版本中，针对安全机制做了改进，增加了"),a("code",[t._v("安全策略")]),t._v("，允许用户指定代码对本地资源的访问权限。如下图所示 JDK1.1安全模型\n"),a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E6%B2%99%E7%AE%B1%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B62-1639131673396.png",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("在 Java1.2 版本中，再次改进了安全机制，增加了"),a("code",[t._v("代码签名")]),t._v("。不论本地代码或是远程代码，都会按照用户的安全策略设定，由类加载器加载到虚拟机中权限不同的运行空间，来实现差异化的代码执行权限控制。如下图所示 JDK1.2安全模型\n"),a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E6%B2%99%E7%AE%B1%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B63-1639131676664.png",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("当前最新的安全机制实现，则引入了域 (Domain) 的概念。虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域 (Protected Domain)，对应不一样的权限 (Permission)。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示 最新的安全模型(jdk 1.6)\n"),a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E6%B2%99%E7%AE%B1%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B64-1639131679464.png",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("以上提到的都是基本的"),a("code",[t._v("Java 安全模型概念")]),t._v("，在应用开发中还有一些"),a("code",[t._v("关于安全的复杂用法")]),t._v("，其中最常用到的 API 就是 doPrivileged。"),a("code",[t._v("doPrivileged 方法能够使一段受信任代码获得更大的权限，甚至比调用它的应用程序还要多，可做到临时访问更多的资源")]),t._v("。有时候这是非常必要的，可以应付一些特殊的应用场景。例如，应用程序可能无法直接访问某些系统资源，但这样的应用程序必须得到这些资源才能够完成功能。")]),t._v(" "),a("h3",{attrs:{id:"组成沙箱的基本组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组成沙箱的基本组件"}},[t._v("#")]),t._v(" 组成沙箱的基本组件")]),t._v(" "),a("ul",[a("li",[t._v("字节码校验器(bytecode verifier) :确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保\n护。但并不是所有的类文件都会经过字节码校验，比如核心类。")]),t._v(" "),a("li",[t._v("类装载器(class loader) :其中类装载器在3个方面对Java沙箱起作用\n"),a("ul",[a("li",[t._v("它防止恶意代码去干涉善意的代码;")]),t._v(" "),a("li",[t._v("它守护了被信任的类库边界;")]),t._v(" "),a("li",[t._v("它将代码归入保护域，确定了代码可以进行哪些操作。")])])])]),t._v(" "),a("p",[t._v("​\t\t虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成， 每-一个被装载的类将有一个名字,这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。")]),t._v(" "),a("p",[t._v("​\t"),a("strong",[t._v("类装载器采用的机制是双亲委派模式。")])]),t._v(" "),a("ol",[a("li",[t._v("从最内层VM自带类加载器开始加载，外层恶意同名类得不到加载从而无法使用;")]),t._v(" "),a("li",[t._v("由于严格通过包来区分了访问域，外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然\n无法生效。")])]),t._v(" "),a("ul",[a("li",[t._v("存取控制器(access controller) : 存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略\n设定，可以由用户指定.")]),t._v(" "),a("li",[t._v("安全管理器(security manager) :是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优\n先级高。")]),t._v(" "),a("li",[t._v("安全软件包(security package) : java.security 下的类和扩展包下的类，允许用户为自己的应用增加新的安\n全特性，包括:\n"),a("ul",[a("li",[t._v("安全提供者")]),t._v(" "),a("li",[t._v("消息摘要")]),t._v(" "),a("li",[t._v("数字签名 keytools")]),t._v(" "),a("li",[t._v("加密")]),t._v(" "),a("li",[t._v("鉴别")])])])]),t._v(" "),a("h2",{attrs:{id:"native"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#native"}},[t._v("#")]),t._v(" Native")]),t._v(" "),a("h3",{attrs:{id:"什么是native"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是native"}},[t._v("#")]),t._v(" 什么是native")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("\t**native 即 JNI（Java Native Interface**）\n")])])]),a("p",[t._v("​\t\t凡是带了native关键字的，说明java的作用范围达不到，去调用底层C语言的库!")]),t._v(" "),a("h3",{attrs:{id:"jni-java-native-interface-java本地方法接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jni-java-native-interface-java本地方法接口"}},[t._v("#")]),t._v(" JNI: Java Native Interface (Java本地方法接口)")]),t._v(" "),a("p",[t._v("​\t凡是带了native关键字的方法就会进入本地方法栈，其他的就是java栈")]),t._v(" "),a("p",[t._v("​\t本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序， Java在诞生的时候是C/C++横行的时候，想要立足，必须有调用C、C++的程序,于是就在内存中专门开辟了一-块区域处理标记为native的代码，它的具体做法是在Native Method Stack中登记native方法，在( Execution Engine )执行引擎执行的时候加载Native Libraies.\n​\t\t目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间通信很发达，比如可以使用Socke通信，也可以使\n用Web Service等等,不多做介绍!")]),t._v(" "),a("h3",{attrs:{id:"native-method-stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#native-method-stack"}},[t._v("#")]),t._v(" Native Method Stack")]),t._v(" "),a("p",[t._v("​\t\t它的具体做法是Native Method Stack中等级native方法，在（Execution Engine）执行引擎执行的时候加载Native Libraies（本地库）。")]),t._v(" "),a("p",[a("strong",[t._v("代码分析")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//native:凡是带了native关键字的，说明java的作用范围打不到了，回去调用底层C语言的库！")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//会进入本地方法栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用本地方法接口 JNI")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//JNI作用：扩展Java作用，融合不同的编程语言为Java所用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//他在内存区域中转码开辟了一块标记区域：Native Method Stack，登记 native 方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在最终执行加载本地方法库中的方法通过JNI（java本地接口）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"作用-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用-2"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),a("p",[t._v("​\t\tjava是跨平台的语言，既然是跨了平台，所付出的代价就是牺牲一些对底层的控制，而java要实现对底层的控制，就需要一些其他语言的帮助，这个就是native的作用了")]),t._v(" "),a("h3",{attrs:{id:"pc寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pc寄存器"}},[t._v("#")]),t._v(" PC寄存器")]),t._v(" "),a("p",[t._v("程序计数器: Program Counter Register\n每个线程都有一一个程序计数器，是线程私有的，就是一一个指针，指向方法区中的方法字节码(用来存储指向像一条指令的地址,也即将要执行的指令代码) .在执行引擎读取下一条指令,是一个非常小的内存空间，几乎可以忽略不计")]),t._v(" "),a("h3",{attrs:{id:"方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[t._v("#")]),t._v(" 方法区")]),t._v(" "),a("p",[t._v("Method Area方法区")]),t._v(" "),a("p",[t._v("​\t\t方法区是被所有线程共享，所有字段和方法字节码,以及-些特殊方法，如构造函数，接口代码也在此定义,简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间;\n​\t\t"),a("strong",[t._v("静态变量、常量、类信息(构造方法、接口定义)、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关")])]),t._v(" "),a("h2",{attrs:{id:"栈和堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈和堆"}},[t._v("#")]),t._v(" 栈和堆")]),t._v(" "),a("p",[a("strong",[t._v("栈：数据结构")])]),t._v(" "),a("p",[a("strong",[t._v("程序 = 数据结构+算法")])]),t._v(" "),a("p",[a("strong",[t._v("栈：先进后出")])]),t._v(" "),a("p",[a("strong",[t._v("队列：先进先出（FIFO：First Input First Output）")])]),t._v(" "),a("p",[t._v("栈：栈内存，主管程序的运行，生命周期和线程同步，线程结束，栈内存也就释放，"),a("strong",[t._v("不存在垃圾回收")])]),t._v(" "),a("p",[t._v("栈的运行机制：栈帧")]),t._v(" "),a("p",[t._v("栈压满了就会爆出异常：StackOverflowError")]),t._v(" "),a("p",[t._v("先用一张图展示一下Java堆栈的概况")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E6%A0%88%E5%92%8C%E5%A0%861-1639131792918.jpeg",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("堆")])]),t._v(" "),a("p",[t._v("方法区：class文件信息，运行时常量池，以及编译器编译后的代码堆：存储对象，对象包含类的信息，指向方法区")]),t._v(" "),a("p",[a("strong",[t._v("栈")])]),t._v(" "),a("p",[t._v("虚拟机栈：表示Java方法执行的内存模型，每调用一个方法就会为每个方法生成一个栈帧（Stack Frame），用来存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法被调用和完成的过程，都对应一个栈帧从虚拟机栈上入栈和出栈的过程。虚拟机栈的生命周期和线程是相同的")]),t._v(" "),a("p",[t._v("本地方法栈：一个支持native方法调用的JVM实现")]),t._v(" "),a("p",[t._v("程序计数器：程序计数器用来记录当前正在执行的指令")]),t._v(" "),a("p",[t._v("用一个十分简单的代码段模拟一下Java堆栈的运行过程：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AppTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nclassPerson "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("publicPerson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("新建一个main线程的一个栈jvm在方法区寻找是否存在Person类的信息如果没找到类加载器加载Person类信息到方法区，然后在堆中创建Person对象，并持有方法区的引用把person添加到main主线程栈中，并指向堆上的Person实例。执行person的sayhello方法，找到堆上的Person实例。根据堆上Person的方法区引用，找到方法区上sayhello的字节码，然后执行完成。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E6%A0%88%E5%92%8C%E5%A0%862-1639131797450.jpeg",alt:"img"}})]),t._v(" "),a("p",[t._v("下面用一段十分简单的代码段描述一下栈的运行过程。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AppTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("publicstaticvoidmain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E6%A0%88%E5%92%8C%E5%A0%863-1639131799796.jpeg",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"jmm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jmm"}},[t._v("#")]),t._v(" JMM")]),t._v(" "),a("h3",{attrs:{id:"什么是jmm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是jmm"}},[t._v("#")]),t._v(" 什么是JMM")]),t._v(" "),a("p",[t._v("​\t\t**JMM（Java Memory Model的缩写,java内存模型）**允许编译器和缓存以数据在处理器特定的缓存（或寄存器）和主存之间移动的次序拥有重要的特权，除非程序员使用了volatile或synchronized明确请求了某些可见性的保证。")]),t._v(" "),a("p",[a("strong",[t._v("作用：缓存一致性协议，用于定义数据读写的规则")])]),t._v(" "),a("p",[t._v("​\t\tJMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个私有的本地内存（Local Memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。")]),t._v(" "),a("p",[t._v("​\t\t**可见性：**每个工作线程都有自己的工作内存，所以当某个线程修改完某个变量之后，在其他的线程中，未必能观察到该变量已经被修改。volatile关键字要求被修改之后的变量要求立即更新到主内存，每次使用前从主内存处进行读取。因此volatile可以保证可见性。除了volatile以外，synchronized和final也能实现可见性。synchronized保证unlock之前必须先把变量刷新回主内存。final修饰的字段在构造器中一旦完成初始化，并且构造器没有this逸出，那么其他线程就能看到final字段的值。")]),t._v(" "),a("p",[t._v("**有序性：**java的有序性跟线程相关。如果在线程内部观察，会发现当前线程的一切操作都是有序的。如果在线程的外部来观察的话，会发现线程的所有操作都是无序的。因为JMM的工作内存和主内存之间存在延迟，而且java会对一些指令进行重新排序。volatile和synchronized可以保证程序的有序性，很多程序员只理解这两个关键字的执行互斥，而没有很好的理解到volatile和synchronized也能保证指令不进行重排序。")]),t._v(" "),a("p",[a("strong",[t._v("解决方案:volatile和synchronized")])]),t._v(" "),a("p",[t._v("Java 内存模型对主内存与工作内存之间的具体交互协议定义了八种操作，具体如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("lock（锁定）：作用于主内存变量，把一个变量标识为一条线程独占状态。")])]),t._v(" "),a("li",[a("p",[t._v("unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。")])]),t._v(" "),a("li",[a("p",[t._v("read（读取）：作用于主内存变量，把一个变量从主内存传输到线程的工作内存中，以便随后的 load 动作使用。")])]),t._v(" "),a("li",[a("p",[t._v("load（载入）：作用于工作内存变量，把 read 操作从主内存中得到的变量值放入工作内存的变量副本中。")])]),t._v(" "),a("li",[a("p",[t._v("use（使用）：作用于工作内存变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量值的字节码指令时执行此操作。")])]),t._v(" "),a("li",[a("p",[t._v("assign（赋值）：作用于工作内存变量，把一个从执行引擎接收的值赋值给工作内存的变量，每当虚拟机遇到一个需要给变量进行赋值的字节码指令时执行此操作。")])]),t._v(" "),a("li",[a("p",[t._v("store（存储）：作用于工作内存变量，把工作内存中一个变量的值传递到主内存中，以便后续 write 操作。")])]),t._v(" "),a("li",[a("p",[t._v("write（写入）：作用于主内存变量，把 store 操作从工作内存中得到的值放入主内存变量中。")])])]),t._v(" "),a("p",[t._v("​        如果要把一个变量从主内存复制到工作内存就必须按顺序执行 read 和 load 操作，从工作内存同步回主内存就必须顺序执行 store 和 write 操作，但是 JVM 只要求了操作的顺序而没有要求上述操作必须保证连续性，所以实质执行中 read 和 load 间及 store 和 write 间是可以插入其他指令的。")]),t._v(" "),a("h3",{attrs:{id:"指令重排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令重排序"}},[t._v("#")]),t._v(" 指令重排序")]),t._v(" "),a("p",[t._v("​\t\t指令重排是指在程序执行过程中, 为了性能考虑, 编译器和CPU可能会对指令重新排序.")]),t._v(" "),a("p",[t._v("​\t\tsychronized和volatile来保证程序执行过程中的原子性, 有序性, 可见性。但是仅靠它们来保证，则代码会时分繁琐。")]),t._v(" "),a("p",[t._v("因此JMM提供了Happen-Before规则来约束数据之间是否存在竞争。")]),t._v(" "),a("p",[a("strong",[t._v("happens-before原则：")])]),t._v(" "),a("p",[t._v("Java内存模型中定义的两项操作之间的次序关系，如果说操作A先行发生于操作B，操作A产生的影响能被操作B观察到，“影响”包含了修改了内存中共享变量的值、发送了消息、调用了方法等。")]),t._v(" "),a("p",[t._v("下面是Java内存模型下一些”天然的“happens-before关系，这些happens-before关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来的话，它们就没有顺序性保障，虚拟机可以对它们进行随意地重排序。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("程序次序规则(Pragram Order Rule)：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环结构。")])]),t._v(" "),a("li",[a("p",[t._v("管程锁定规则(Monitor Lock Rule)：一个unlock操作先行发生于对同一个锁的lock操作的后面。lock先于unlock")])]),t._v(" "),a("li",[a("p",[t._v("volatile变量规则(Volatile Variable Rule)：对一个volatile变量的写操作先行发生于后面对这个变量的读取操作。volatile变量写先于读。")])]),t._v(" "),a("li",[a("p",[t._v("线程启动规则(Thread Start Rule)：Thread对象的start()方法先行发生于此线程的每一个动作。")])]),t._v(" "),a("li",[a("p",[t._v("线程终于规则(Thread Termination Rule)：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束，Thread.isAlive()的返回值等作段检测到线程已经终止执行。")])]),t._v(" "),a("li",[a("p",[t._v("线程中断规则(Thread Interruption Rule)：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测是否有中断发生。中断先于中断检测")])]),t._v(" "),a("li",[a("p",[t._v("对象终结规则(Finalizer Rule)：一个对象初始化完成(构造方法执行完成)先行发生于它的finalize()方法的开始。")])]),t._v(" "),a("li",[a("p",[t._v("传递性(Transitivity)：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。")]),t._v(" "),a("p",[t._v("————————————————")])])]),t._v(" "),a("p",[t._v("原文链接：https://blog.csdn.net/dingchang3060/java/article/details/82384748")]),t._v(" "),a("p",[t._v("参考链接：https://www.jianshu.com/p/8a58d8335270")]),t._v(" "),a("h2",{attrs:{id:"gc-垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc-垃圾回收"}},[t._v("#")]),t._v(" GC:垃圾回收")]),t._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("垃圾收集 Garbage Collection 通常被称为“GC”，它诞生于1960年 MIT 的 Lisp 语言，经过半个多世纪，目前已经十分成熟了。 jvm 中，程序计数器、虚拟机栈、本地方法栈都是随线程而生随线程而灭，栈帧随着方法的进入和退出做入栈和出栈操作，实现了自动的内存清理，因此，我们的内存垃圾回收主要集中于 java 堆和方法区中，在程序运行期间，这部分内存的分配和使用都是动态的.")]),t._v(" "),a("p",[t._v("GC作用于堆和方法区")]),t._v(" "),a("p",[t._v("JVM在进行GC时，步步hi堆这三个区域同一回收，大部分都是回收新生代")]),t._v(" "),a("ul",[a("li",[t._v("新生代")]),t._v(" "),a("li",[t._v("幸存区（from，to）")]),t._v(" "),a("li",[t._v("老年区")])]),t._v(" "),a("p",[t._v("GC两种类：轻GC（普通的GC），重GC（全局GC）")]),t._v(" "),a("h3",{attrs:{id:"gc的常用算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc的常用算法"}},[t._v("#")]),t._v(" GC的常用算法")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("标记清除法")]),t._v("：“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。")]),t._v(" "),a("p",[t._v("它的主要缺点有两个：一个是效率问题，标记和清除过程的效率都不高；另外一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。"),a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E6%B3%95-1639132105940.jfif",alt:""}})])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("标记(压缩)整理")]),t._v(":复制收集算法在对象存活率较高时就要执行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。")]),t._v(" "),a("p",[t._v("根据老年代的特点，有人提出了另外一种“标记-整理”（Mark-Compact）算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存"),a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E6%A0%87%E8%AE%B0%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95-1639132114726.webp",alt:""}})])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("复制算法")]),t._v(":“复制”（Copying）的收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。")]),t._v(" "),a("p",[t._v("这样使得每次都是对其中的一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，持续复制长生存期的对象则导致效率降低。"),a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95-1639132122228.webp",alt:""}})])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("引用计数")]),t._v("：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("分代收集算法")]),t._v(":GC分代的基本假设：绝大部分对象的生命周期都非常短暂，存活时间短。")]),t._v(" "),a("p",[t._v("“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("总结")])]),t._v(" "),a("ul",[a("li",[t._v("内存效率：复制算法>标记清除算法>标记压缩算法（时间复杂度）")]),t._v(" "),a("li",[t._v("内存整齐度：复制算法=标记压缩算法>标记清除法")]),t._v(" "),a("li",[t._v("内存利用率：标记压缩算法=标记清楚散发>复制算法")]),t._v(" "),a("li",[t._v("没有最好的算法，只有最合适的算法--\x3e分代收集算法")]),t._v(" "),a("li",[t._v("年轻代：存活率低--\x3e复制算法")]),t._v(" "),a("li",[t._v("老年代：存活率高--\x3e标记清除算法(N次数)+标记压缩(1次)")])])])]),t._v(" "),a("h3",{attrs:{id:"垃圾收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[t._v("#")]),t._v(" 垃圾收集器")]),t._v(" "),a("p",[a("strong",[t._v("如果说收集算法是内存回收的方法论，垃圾回收器就是内存回收的具体表现")])]),t._v(" "),a("p",[a("strong",[t._v("Serial收集器")])]),t._v(" "),a("p",[t._v("串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；垃圾收集的过程中会Stop The World（服务暂停）")]),t._v(" "),a("p",[t._v("参数控制： "),a("code",[t._v("-XX:+UseSerialGC")]),t._v(" 串行收集器")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/image-20211210183001686-1639132209697.png",alt:"image-20211210183001686"}})]),t._v(" "),a("p",[t._v("ParNew收集器 ParNew收集器其实就是Serial收集器的多线程版本。新生代并行，老年代串行；新生代复制算法、老年代标记-压缩")]),t._v(" "),a("p",[t._v("参数控制：")]),t._v(" "),a("p",[a("code",[t._v("-XX:+UseParNewGC")]),t._v(" ParNew收集器\n"),a("code",[t._v("-XX:ParallelGCThreads")]),t._v(" 限制线程数量")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/image-20211210183024835-1639132231665.png",alt:"image-20211210183024835"}})]),t._v(" "),a("p",[a("strong",[t._v("Parallel收集器")])]),t._v(" "),a("p",[t._v("Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量；也可以通过参数控制GC的时间不大于多少毫秒或者比例；新生代复制算法、老年代标记-压缩")]),t._v(" "),a("p",[t._v("参数控制： "),a("code",[t._v("-XX:+UseParallelGC")]),t._v(" 使用Parallel收集器+ 老年代串行")]),t._v(" "),a("p",[a("strong",[t._v("Parallel Old 收集器")])]),t._v(" "),a("p",[t._v("Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。这个收集器是在JDK 1.6中才开始提供")]),t._v(" "),a("p",[t._v("参数控制： "),a("code",[t._v("-XX:+UseParallelOldGC")]),t._v(" 使用Parallel收集器+ 老年代并行")]),t._v(" "),a("p",[a("strong",[t._v("CMS收集器")])]),t._v(" "),a("p",[t._v("CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。")]),t._v(" "),a("p",[t._v("从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤，包括：")]),t._v(" "),a("ul",[a("li",[t._v("初始标记（CMS initial mark）")]),t._v(" "),a("li",[t._v("并发标记（CMS concurrent mark）")]),t._v(" "),a("li",[t._v("重新标记（CMS remark）")]),t._v(" "),a("li",[t._v("并发清除（CMS concurrent sweep）")])]),t._v(" "),a("p",[t._v("其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。")]),t._v(" "),a("p",[t._v("由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。老年代收集器（新生代使用ParNew）")]),t._v(" "),a("p",[a("strong",[t._v("优点")]),t._v(": 并发收集、低停顿\n"),a("strong",[t._v("缺点")]),t._v(": 产生大量空间碎片、并发阶段会降低吞吐量")]),t._v(" "),a("p",[t._v("参数控制：")]),t._v(" "),a("p",[a("code",[t._v("-XX:+UseConcMarkSweepGC")]),t._v(" 使用CMS收集器\n"),a("code",[t._v("-XX:+ UseCMSCompactAtFullCollection")]),t._v(" Full GC后，进行一次碎片整理；整理过程是独占的，会引起停顿时间变长\n"),a("code",[t._v("-XX:+CMSFullGCsBeforeCompaction")]),t._v(" 设置进行几次Full GC后，进行一次碎片整理\n"),a("code",[t._v("-XX:ParallelCMSThreads")]),t._v(" 设定CMS的线程数量（一般情况约等于可用CPU数量）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/image-20211210183105756-1639132273389.png",alt:"image-20211210183105756"}})]),t._v(" "),a("p",[a("strong",[t._v("G1收集器")])]),t._v(" "),a("p",[t._v("G1是目前技术发展的最前沿成果之一，HotSpot开发团队赋予它的使命是未来可以替换掉JDK1.5中发布的CMS收集器。与CMS收集器相比G1收集器有以下特点：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("空间整合")]),t._v("，G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。")]),t._v(" "),a("li",[a("strong",[t._v("可预测停顿")]),t._v("，这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。")])]),t._v(" "),a("p",[t._v("上面提到的垃圾收集器，收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔阂了，它们都是一部分（可以不连续）Region的集合。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/image-20211210183151017-1639132316980.png",alt:"image-20211210183151017"}})]),t._v(" "),a("p",[t._v("G1的新生代收集跟ParNew类似，当新生代占用达到一定比例的时候，开始出发收集。和CMS类似，G1收集器收集老年代对象会有短暂停顿。")]),t._v(" "),a("p",[t._v("收集步骤：")]),t._v(" "),a("p",[t._v("1、标记阶段，首先初始标记(Initial-Mark),这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC。对应GC log:GC pause (young) (inital-mark)")]),t._v(" "),a("p",[t._v("2、Root Region Scanning，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成。")]),t._v(" "),a("p",[t._v("3、Concurrent Marking，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/image-20211210183207644-1639132333271.png",alt:"image-20211210183207644"}})]),t._v(" "),a("p",[t._v("4、Remark, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初始快照算法:snapshot-at-the-beginning (SATB)。")]),t._v(" "),a("p",[t._v("5、Copy/Clean up，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/image-20211210183228408-1639132375565.png",alt:"image-20211210183228408"}})]),t._v(" "),a("p",[t._v("6、复制/清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/yong-forever/image_store/raw/master/utools/image-20211210183241685-1639132378204.png",alt:"image-20211210183241685"}})]),t._v(" "),a("p",[a("strong",[t._v("常用的收集器组合")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("新生代GC策略")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("老年老代GC策略")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("组合1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Serial")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Serial Old")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Serial和Serial Old都是单线程进行GC，特点就是GC时暂停所有应用线程。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("组合2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Serial")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CMS+Serial Old")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CMS（Concurrent Mark Sweep）是并发GC，实现GC线程和应用线程并发工作，不需要暂停所有应用线程。另外，当CMS进行GC失败时，会自动使用Serial Old策略进行GC。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("组合3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("ParNew")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CMS")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用 "),a("code",[t._v("-XX:+UseParNewGC")]),t._v("选项来开启。ParNew是Serial的并行版本，可以指定GC线程数，默认GC线程数为CPU的数量。可以使用-XX:ParallelGCThreads选项指定GC的线程数。如果指定了选项 "),a("code",[t._v("-XX:+UseConcMarkSweepGC")]),t._v("选项，则新生代默认使用ParNew GC策略。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("组合4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("ParNew")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Serial Old")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用 "),a("code",[t._v("-XX:+UseParNewGC")]),t._v("选项来开启。新生代使用ParNew GC策略，年老代默认使用Serial Old GC策略。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("组合5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Parallel Scavenge")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Serial Old")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Parallel Scavenge策略主要是关注一个可控的吞吐量：应用程序运行时间 / (应用程序运行时间 + GC时间)，可见这会使得CPU的利用率尽可能的高，适用于后台持久运行的应用程序，而不适用于交互较多的应用程序。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("组合6")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Parallel Scavenge")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Parallel Old")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Parallel Old是Serial Old的并行版本")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("组合7")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("G1GC")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("G1GC")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("-XX:+UnlockExperimentalVMOptions")]),t._v(" "),a("code",[t._v("-XX:+UseG1GC")]),t._v(" #开启； "),a("code",[t._v("-XX:MaxGCPauseMillis=50")]),t._v(" #暂停时间目标； "),a("code",[t._v("-XX:GCPauseIntervalMillis=200")]),t._v(" #暂停间隔目标； "),a("code",[t._v("-XX:+G1YoungGenSize=512m")]),t._v(" #年轻代大小； "),a("code",[t._v("-XX:SurvivorRatio=6")]),t._v(" #幸存区比例")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);