(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{400:function(r,t,n){"use strict";n.r(t);var e=n(4),a=Object(e.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("p",[r._v("title: 面试问题集锦\ndate: 2024-02-04 09:11:55\npermalink: /pages/aea6571b7a8bae86\ncategories:")]),r._v(" "),t("ul",[t("li",[r._v("更多")]),r._v(" "),t("li",[r._v("面试\ntags:")]),r._v(" "),t("li",[r._v("null\nauthor:\nname: yong-forever\nlink: https://github.com/yong-forever")])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-是什么"}},[r._v("#")]),r._v(" Spring Boot 是什么？")]),r._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/spring-projects/spring-boot",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring Boot"),t("OutboundLink")],1),r._v(" 是 Spring 的"),t("strong",[r._v("子项目")]),r._v("，正如其名字，提供 Spring 的引导( "),t("strong",[r._v("Boot")]),r._v(" )的功能。")]),r._v(" "),t("p",[r._v("通过 Spring Boot ，我们开发者可以快速配置 Spring 项目，引入各种 Spring MVC、Spring Transaction、Spring AOP、MyBatis 等等框架，而无需不断重复编写繁重的 Spring 配置，降低了 Spring 的使用成本。")]),r._v(" "),t("blockquote",[t("p",[r._v("犹记当年，Spring XML 为主的时代，大晚上各种搜索 Spring 的配置，苦不堪言。现在有了 Spring Boot 之后，生活真美好。")])]),r._v(" "),t("p",[r._v("Spring Boot 提供了各种 Starter 启动器，提供标准化的默认配置。例如：")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.1.1.RELEASE",target:"_blank",rel:"noopener noreferrer"}},[t("code",[r._v("spring-boot-starter-web")]),t("OutboundLink")],1),r._v(" 启动器，可以快速配置 Spring MVC 。")]),r._v(" "),t("li",[t("a",{attrs:{href:"https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/1.3.2",target:"_blank",rel:"noopener noreferrer"}},[t("code",[r._v("mybatis-spring-boot-starter")]),t("OutboundLink")],1),r._v(" 启动器，可以快速配置 MyBatis 。")])]),r._v(" "),t("p",[r._v("并且，Spring Boot 基本已经一统 Java 项目的开发，大量的开源项目都实现了其的 Starter 启动器。例如：")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/apache/incubator-dubbo-spring-boot-project",target:"_blank",rel:"noopener noreferrer"}},[t("code",[r._v("incubator-dubbo-spring-boot-project")]),t("OutboundLink")],1),r._v(" 启动器，可以快速配置 Dubbo 。")]),r._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/maihaoche/rocketmq-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[t("code",[r._v("rocketmq-spring-boot-starter")]),t("OutboundLink")],1),r._v(" 启动器，可以快速配置 RocketMQ 。")])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-提供了哪些核心功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-提供了哪些核心功能"}},[r._v("#")]),r._v(" Spring Boot 提供了哪些核心功能？")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("1、独立运行 Spring 项目")]),r._v(" "),t("p",[r._v("Spring Boot 可以以 jar 包形式独立运行，运行一个 Spring Boot 项目只需要通过 "),t("code",[r._v("java -jar xx.jar")]),r._v(" 来运行。")])]),r._v(" "),t("li",[t("p",[r._v("2、内嵌 Servlet 容器")]),r._v(" "),t("p",[r._v("Spring Boot 可以选择内嵌 Tomcat、Jetty 或者 Undertow，这样我们无须以 war 包形式部署项目。")]),r._v(" "),t("blockquote",[t("p",[r._v("第 2 点是对第 1 点的补充，在 Spring Boot 未出来的时候，大多数 Web 项目，是打包成 war 包，部署到 Tomcat、Jetty 等容器。")])])]),r._v(" "),t("li",[t("p",[r._v("3、提供 Starter 简化 Maven 配置")]),r._v(" "),t("p",[r._v("Spring 提供了一系列的 starter pom 来简化 Maven 的依赖加载。例如，当你使用了 "),t("code",[r._v("spring-boot-starter-web")]),r._v(" ，会自动加入如下依赖："),t("a",{attrs:{href:"http://static.iocoder.cn/images/Spring/2018-12-26/01.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://static.iocoder.cn/images/Spring/2018-12-26/01.png",alt:" 的 pom 文件"}}),t("OutboundLink")],1),t("code",[r._v("spring-boot-starter-web")]),r._v(" 的 pom 文件")])]),r._v(" "),t("li",[t("p",[r._v("4、"),t("a",{attrs:{href:"https://www.jianshu.com/p/ddb6e32e3faf",target:"_blank",rel:"noopener noreferrer"}},[r._v("自动配置 Spring Bean"),t("OutboundLink")],1)]),r._v(" "),t("p",[r._v("Spring Boot 检测到特定类的存在，就会针对这个应用做一定的配置，进行自动配置 Bean ，这样会极大地减少我们要使用的配置。")]),r._v(" "),t("p",[r._v("当然，Spring Boot 只考虑大多数的开发场景，并不是所有的场景，若在实际开发中我们需要配置Bean ，而 Spring Boot 没有提供支持，则可以自定义自动配置进行解决。")])]),r._v(" "),t("li",[t("p",[r._v("5、"),t("a",{attrs:{href:"https://blog.csdn.net/wangshuang1631/article/details/72810412",target:"_blank",rel:"noopener noreferrer"}},[r._v("准生产的应用监控"),t("OutboundLink")],1)]),r._v(" "),t("p",[r._v("Spring Boot 提供基于 HTTP、JMX、SSH 对运行时的项目进行监控。")])]),r._v(" "),t("li",[t("p",[r._v("6、无代码生成和 XML 配置")]),r._v(" "),t("p",[r._v("Spring Boot 没有引入任何形式的代码生成，它是使用的 Spring 4.0 的条件 "),t("code",[r._v("@Condition")]),r._v(" 注解以实现根据条件进行配置。同时使用了 Maven /Gradle 的"),t("strong",[r._v("依赖传递解析机制")]),r._v("来实现 Spring 应用里面的自动配置。")]),r._v(" "),t("blockquote",[t("p",[r._v("第 6 点是第 3 点的补充。")])])])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-有什么优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-有什么优缺点"}},[r._v("#")]),r._v(" Spring Boot 有什么优缺点？")]),r._v(" "),t("blockquote",[t("p",[r._v("任何技术栈，有优点必有缺点，没有银弹。")]),r._v(" "),t("p",[r._v("另外，这个问题的回答，我们是基于 "),t("a",{attrs:{href:"https://blog.csdn.net/fly_zhyu/article/details/76407830",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot浅谈(是什么/能干什么/优点和不足)》"),t("OutboundLink")],1),r._v(" 整理，所以胖友主要看下这篇文章。")])]),r._v(" "),t("p",[t("strong",[r._v("Spring Boot 的优点")])]),r._v(" "),t("blockquote",[t("p",[r._v("优点和 "),t("a",{attrs:{href:"http://svip.iocoder.cn/Spring-Boot/Interview/#",target:"_blank",rel:"noopener noreferrer"}},[r._v("「Spring Boot 提供了哪些核心功能？」"),t("OutboundLink")],1),r._v(" 问题的答案，是比较重叠的。")])]),r._v(" "),t("ul",[t("li",[r._v("1、使【编码】变简单。")]),r._v(" "),t("li",[r._v("2、使【配置】变简单。")]),r._v(" "),t("li",[r._v("3、使【部署】变简单。")]),r._v(" "),t("li",[r._v("4、使【监控】变简单。")])]),r._v(" "),t("p",[t("strong",[r._v("Spring Boot 的缺点")])]),r._v(" "),t("blockquote",[t("p",[r._v("如下的缺点，基于 "),t("a",{attrs:{href:"https://blog.csdn.net/fly_zhyu/article/details/76407830",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot浅谈(是什么/能干什么/优点和不足)》"),t("OutboundLink")],1),r._v("，考虑的出发点是把 Spring Boot 作为微服务的框架的选型的角度进行考虑。")])]),r._v(" "),t("ul",[t("li",[t("p",[r._v("1、没有提供相应的【服务发现和注册】的配套功能。")]),r._v(" "),t("blockquote",[t("p",[r._v("当然，实际上 Spring Boot 本身是不需要提供这样的功能。服务发现和注册的功能，是在 Spring Cloud 中进行提供。")])])]),r._v(" "),t("li",[t("p",[r._v("2、自身的 acturator 所提供的【监控功能】，也需要与现有的监控对接。")])]),r._v(" "),t("li",[t("p",[r._v("3、没有配套的【安全管控】方案。")]),r._v(" "),t("blockquote",[t("p",[r._v("关于这一点，也有点迷糊，Spring Security 是可以比较方便的集成到 Spring Boot 中，所以不晓得这里的【安全管控】的定义是什么。所以这一点，面试的时候回答，可以暂时先省略。")])])]),r._v(" "),t("li",[t("p",[r._v("4、对于 REST 的落地，还需要自行结合实际进行 URI 的规范化工作")]),r._v(" "),t("blockquote",[t("p",[r._v("这个严格来说，不算缺点。本身，是规范的范畴。")])])])]),r._v(" "),t("p",[r._v("所以，上面的缺点，严格来说可能不太适合在面试中回答。认为，Spring Boot 的缺点主要是，因为自动配置 Spring Bean 的功能，我们可能无法知道，哪些 Bean 被进行创建了。这个时候，如果我们想要自定义一些 Bean ，可能存在冲突，或者不知道实际注入的情况。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot、spring-mvc-和-spring-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot、spring-mvc-和-spring-有什么区别"}},[r._v("#")]),r._v(" Spring Boot、Spring MVC 和 Spring 有什么区别？")]),r._v(" "),t("p",[r._v("Spring 的完整名字，应该是 Spring Framework 。它提供了多个模块，Spring IoC、Spring AOP、Spring MVC 等等。所以，Spring MVC 是 Spring Framework 众多模块中的一个。")]),r._v(" "),t("p",[r._v("而 Spring Boot 是构造在 Spring Framework 之上的 Boot 启动器，旨在更容易的配置一个 Spring 项目。")]),r._v(" "),t("p",[r._v("总结说来，如下图所示："),t("a",{attrs:{href:"http://static.iocoder.cn/images/Spring/2018-12-26/02.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://static.iocoder.cn/images/Spring/2018-12-26/02.png",alt:"Spring Boot 对比 Spring MVC 对比 Spring ？"}}),t("OutboundLink")],1),r._v("Spring Boot 对比 Spring MVC 对比 Spring ？")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-中的-starter-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中的-starter-是什么"}},[r._v("#")]),r._v(" Spring Boot 中的 Starter 是什么？")]),r._v(" "),t("p",[r._v("比较"),t("strong",[r._v("通俗")]),r._v("的说法：")]),r._v(" "),t("blockquote",[t("p",[r._v("FROM "),t("a",{attrs:{href:"https://www.cnblogs.com/EasonJim/p/7615801.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 中 Starter 是什么》"),t("OutboundLink")],1)]),r._v(" "),t("p",[r._v("比如我们要在 Spring Boot 中引入 Web MVC 的支持时，我们通常会引入这个模块 "),t("code",[r._v("spring-boot-starter-web")]),r._v(" ，而这个模块如果解压包出来会发现里面什么都没有，只定义了一些 "),t("strong",[r._v("POM")]),r._v(" 依赖。如下图所示："),t("a",{attrs:{href:"http://static.iocoder.cn/images/Spring/2018-12-26/03.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://static.iocoder.cn/images/Spring/2018-12-26/03.png",alt:""}}),t("OutboundLink")],1),t("code",[r._v("spring-boot-starter-web")])]),r._v(" "),t("p",[r._v("经过研究，Starter 主要用来简化依赖用的。比如我们之前做MVC时要引入日志组件，那么需要去找到log4j的版本，然后引入，现在有了Starter之后，直接用这个之后，log4j就自动引入了，也不用关心版本这些问题。")])]),r._v(" "),t("p",[r._v("比较"),t("strong",[r._v("书名")]),r._v("的说法：")]),r._v(" "),t("blockquote",[t("p",[r._v("FROM "),t("a",{attrs:{href:"http://www.importnew.com/27101.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot Starter 介绍》"),t("OutboundLink")],1)]),r._v(" "),t("p",[r._v("依赖管理是任何复杂项目的关键部分。以手动的方式来实现依赖管理不太现实，你得花更多时间，同时你在项目的其他重要方面能付出的时间就会变得越少。")]),r._v(" "),t("p",[r._v("Spring Boot Starter 就是为了解决这个问题而诞生的。Starter "),t("strong",[r._v("POM")]),r._v(" 是一组方便的依赖描述符，您可以将其包含在应用程序中。您可以获得所需的所有 Spring 和相关技术的一站式服务，无需通过示例代码搜索和复制粘贴依赖。")])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-常用的-starter-有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-常用的-starter-有哪些"}},[r._v("#")]),r._v(" Spring Boot 常用的 Starter 有哪些？")]),r._v(" "),t("ul",[t("li",[t("code",[r._v("spring-boot-starter-web")]),r._v(" ：提供 Spring MVC + 内嵌的 Tomcat 。")]),r._v(" "),t("li",[t("code",[r._v("spring-boot-starter-data-jpa")]),r._v(" ：提供 Spring JPA + Hibernate 。")]),r._v(" "),t("li",[t("code",[r._v("spring-boot-starter-data-redis")]),r._v(" ：提供 Redis 。")]),r._v(" "),t("li",[t("code",[r._v("mybatis-spring-boot-starter")]),r._v(" ：提供 MyBatis 。")])]),r._v(" "),t("h2",{attrs:{id:"创建一个-spring-boot-project-的最简单的方法是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个-spring-boot-project-的最简单的方法是什么"}},[r._v("#")]),r._v(" 创建一个 Spring Boot Project 的最简单的方法是什么？")]),r._v(" "),t("p",[r._v("Spring Initializr 是创建 Spring Boot Projects 的一个很好的工具。打开 "),t("code",[r._v('"https://start.spring.io/"')]),r._v(" 网站，我们可以看到 Spring Initializr 工具，如下图所示：")]),r._v(" "),t("p",[t("a",{attrs:{href:"http://static.iocoder.cn/images/Spring/2018-12-26/04.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://static.iocoder.cn/images/Spring/2018-12-26/04.png",alt:"Spring Initializr"}}),t("OutboundLink")],1),r._v("Spring Initializr")]),r._v(" "),t("ul",[t("li",[r._v("图中的每一个"),t("strong",[r._v("红线")]),r._v("，都可以填写相应的配置。相信胖友都很熟悉，就不哔哔了。")]),r._v(" "),t("li",[r._v("点击生 GenerateProject ，生成 Spring Boot Project 。")]),r._v(" "),t("li",[r._v("将项目导入 IDEA ，记得选择现有的 Maven 项目。")])]),r._v(" "),t("hr"),r._v(" "),t("p",[r._v("当然，我们以前使用 IDEA 创建 Spring 项目的方式，也一样能创建 Spring Boot Project 。Spring Initializr 更多的是，提供一个便捷的工具。")]),r._v(" "),t("h2",{attrs:{id:"如何统一引入-spring-boot-版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何统一引入-spring-boot-版本"}},[r._v("#")]),r._v(" 如何统一引入 Spring Boot 版本？")]),r._v(" "),t("p",[t("strong",[r._v("目前有两种方式")]),r._v("。")]),r._v(" "),t("p",[r._v("① 方式一：继承 "),t("code",[r._v("spring-boot-starter-parent")]),r._v(" 项目。配置代码如下：")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.1.RELEASE</version>\n</parent>\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br")])]),t("p",[r._v("② 方式二：导入 spring-boot-dependencies 项目依赖。配置代码如下：")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>1.5.1.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br"),t("span",{staticClass:"line-number"},[r._v("6")]),t("br"),t("span",{staticClass:"line-number"},[r._v("7")]),t("br"),t("span",{staticClass:"line-number"},[r._v("8")]),t("br"),t("span",{staticClass:"line-number"},[r._v("9")]),t("br"),t("span",{staticClass:"line-number"},[r._v("10")]),t("br"),t("span",{staticClass:"line-number"},[r._v("11")]),t("br")])]),t("p",[t("strong",[r._v("如何选择？")])]),r._v(" "),t("p",[r._v("因为一般我们的项目中，都有项目自己的 Maven parent 项目，所以【方式一】显然会存在冲突。所以实际场景下，推荐使用【方式二】。")]),r._v(" "),t("p",[r._v("详细的，推荐阅读 "),t("a",{attrs:{href:"https://blog.csdn.net/rainbow702/article/details/55046298",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 不使用默认的 parent，改用自己的项目的 parent》"),t("OutboundLink")],1),r._v(" 文章。")]),r._v(" "),t("p",[r._v("另外，在使用 Spring Cloud 的时候，也可以使用这样的方式。")]),r._v(" "),t("h2",{attrs:{id:"运行-spring-boot-有哪几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行-spring-boot-有哪几种方式"}},[r._v("#")]),r._v(" 运行 Spring Boot 有哪几种方式？")]),r._v(" "),t("ul",[t("li",[r._v("1、打包成 Fat Jar ，直接使用 "),t("code",[r._v("java -jar")]),r._v(" 运行。目前主流的做法，推荐。")]),r._v(" "),t("li",[r._v("2、在 IDEA 或 Eclipse 中，直接运行应用的 Spring Boot 启动类的 "),t("code",[r._v("#main(String[] args)")]),r._v(" 启动。适用于开发调试场景。")]),r._v(" "),t("li",[r._v("3、如果是 Web 项目，可以打包成 War 包，使用外部 Tomcat 或 Jetty 等容器。")])]),r._v(" "),t("h2",{attrs:{id:"如何打包-spring-boot-项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何打包-spring-boot-项目"}},[r._v("#")]),r._v(" 如何打包 Spring Boot 项目？")]),r._v(" "),t("p",[r._v("通过引入 "),t("code",[r._v("spring-boot-maven-plugin")]),r._v(" 插件，执行 "),t("code",[r._v("mvn clean package")]),r._v(" 命令，将 Spring Boot 项目打成一个 Fat Jar 。后续，我们就可以直接使用 "),t("code",[r._v("java -jar")]),r._v(" 运行。")]),r._v(" "),t("p",[r._v("关于 "),t("code",[r._v("spring-boot-maven-plugin")]),r._v(" 插件，更多详细的可以看看 [《创建可执行 jar》](https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh/II. Getting started/11.5. Creating an executable jar.html) 。")]),r._v(" "),t("h2",{attrs:{id:"如果更改内嵌-tomcat-的端口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如果更改内嵌-tomcat-的端口"}},[r._v("#")]),r._v(" 如果更改内嵌 Tomcat 的端口？")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("方式一，修改 "),t("code",[r._v("application.properties")]),r._v(" 配置文件的 "),t("code",[r._v("server.port")]),r._v(" 属性。")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("server.port=9090\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br")])])]),r._v(" "),t("li",[t("p",[r._v("方式二，通过启动命令增加 "),t("code",[r._v("server.port")]),r._v(" 参数进行修改。")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("java -jar xxx.jar --server.port=9090\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br")])])])]),r._v(" "),t("p",[r._v("当然，以上的方式，不仅仅适用于 Tomcat ，也适用于 Jetty、Undertow 等服务器。")]),r._v(" "),t("h2",{attrs:{id:"如何重新加载-spring-boot-上的更改-而无需重新启动服务器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何重新加载-spring-boot-上的更改-而无需重新启动服务器"}},[r._v("#")]),r._v(" 如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？")]),r._v(" "),t("p",[r._v("一共有三种方式，可以实现效果：")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("【推荐】"),t("code",[r._v("spring-boot-devtools")]),r._v(" 插件。注意，这个工具需要配置 IDEA 的自动编译。")])]),r._v(" "),t("li",[t("p",[r._v("Spring Loaded 插件。")]),r._v(" "),t("blockquote",[t("p",[r._v("Spring Boot 2.X 后，官方宣布不再支持 Spring Loaded 插件 的更新，所以基本可以无视它了。")])])]),r._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/bab43eaa4e14",target:"_blank",rel:"noopener noreferrer"}},[r._v("JRebel"),t("OutboundLink")],1),r._v(" 插件，需要付费。")])])]),r._v(" "),t("p",[r._v("关于如何使用 "),t("code",[r._v("spring-boot-devtools")]),r._v(" 和 Spring Loaded 插件，胖友可以看看 "),t("a",{attrs:{href:"https://segmentfault.com/a/1190000014488100",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 学习笔记：Spring Boot Developer Tools 与热部署》"),t("OutboundLink")],1),r._v(" 。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-的配置文件有哪几种格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-的配置文件有哪几种格式"}},[r._v("#")]),r._v(" Spring Boot 的配置文件有哪几种格式？")]),r._v(" "),t("p",[r._v("Spring Boot 目前支持两种格式的配置文件：")]),r._v(" "),t("ul",[t("li",[t("p",[t("code",[r._v(".properties")]),r._v(" 格式。示例如下：")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("server.port = 9090\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br")])])]),r._v(" "),t("li",[t("p",[t("code",[r._v(".yaml")]),r._v(" 格式。示例如下：")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("server:\n    port: 9090\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br")])])])]),r._v(" "),t("hr"),r._v(" "),t("p",[r._v("可能有胖友不了解 "),t("strong",[r._v("YAML 格式")]),r._v("？")]),r._v(" "),t("p",[r._v("YAML 是一种人类可读的数据序列化语言，它通常用于配置文件。")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("与 Properties 文件相比，如果我们想要在配置文件中添加复杂的属性 YAML 文件就更加"),t("strong",[r._v("结构化")]),r._v("。从上面的示例，我们可以看出 YAML 具有"),t("strong",[r._v("分层")]),r._v("配置数据。")])]),r._v(" "),t("li",[t("p",[r._v("当然 YAML 在 Spring 会存在一个缺陷，")]),r._v(" "),t("p",[t("code",[r._v("@PropertySource")])]),r._v(" "),t("p",[r._v("注解不支持读取 YAML 配置文件，仅支持 Properties 配置文件。")]),r._v(" "),t("ul",[t("li",[r._v("不过这个问题也不大，可以麻烦一点使用 "),t("a",{attrs:{href:"https://blog.csdn.net/lafengwnagzi/article/details/74178374",target:"_blank",rel:"noopener noreferrer"}},[t("code",[r._v("@Value")]),t("OutboundLink")],1),r._v(" 注解，来读取 YAML 配置项。")])])])]),r._v(" "),t("p",[r._v("实际场景下，相对比较喜欢使用 Properties 配置文件。个人喜欢~当然，YAML 已经越来越流行了。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-默认配置文件是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-默认配置文件是什么"}},[r._v("#")]),r._v(" Spring Boot 默认配置文件是什么？")]),r._v(" "),t("p",[r._v("对于 Spring Boot 应用，默认的配置文件根目录下的 "),t("strong",[r._v("application")]),r._v(" 配置文件，当然可以是 Properties 格式，也可以是 YAML 格式。")]),r._v(" "),t("p",[r._v("可能有胖友说，我在网上看到面试题中，说还有一个根目录下的 "),t("strong",[r._v("bootstrap")]),r._v(" 配置文件。这个是 Spring Cloud 新增的启动配置文件，"),t("a",{attrs:{href:"https://my.oschina.net/freeskyjs/blog/1843048",target:"_blank",rel:"noopener noreferrer"}},[r._v("需要引入 "),t("code",[r._v("spring-cloud-context")]),r._v(" 依赖后，才会进行加载"),t("OutboundLink")],1),r._v("。它的特点和用途主要是：")]),r._v(" "),t("blockquote",[t("p",[r._v("参考 "),t("a",{attrs:{href:"https://my.oschina.net/neverforget/blog/1525947",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Cloud 中配置文件名 bootstrap.yml 和 application.yml 区别》"),t("OutboundLink")],1),r._v(" 文章。")])]),r._v(" "),t("ul",[t("li",[r._v("【特点】因为 bootstrap 由父 ApplicationContext 加载，比 application 优先加载。")]),r._v(" "),t("li",[r._v("【特点】因为 bootstrap 优先于 application 加载，所以不会被它覆盖。")]),r._v(" "),t("li",[r._v("【用途】使用配置中心 Spring Cloud Config 时，需要在 bootstrap 中配置配置中心的地址，从而实现父 ApplicationContext 加载时，从配置中心拉取相应的配置到应用中。")])]),r._v(" "),t("p",[r._v("另外，"),t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Appendix A. Common application properties》"),t("OutboundLink")],1),r._v(" 中，有 application 配置文件的通用属性列表。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-如何定义多套不同环境配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-如何定义多套不同环境配置"}},[r._v("#")]),r._v(" Spring Boot 如何定义多套不同环境配置？")]),r._v(" "),t("p",[r._v("可以参考 "),t("a",{attrs:{href:"https://blog.csdn.net/top_code/article/details/78570047",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 教程 - Spring Boot Profiles 实现多环境下配置切换》"),t("OutboundLink")],1),r._v(" 一文。")]),r._v(" "),t("p",[r._v("但是，需要考虑一个问题，生产环境的配置文件的安全性，显然我们不能且不应该把生产的配置放到项目的 Git 仓库中进行管理。那么应该怎么办呢？")]),r._v(" "),t("ul",[t("li",[r._v("方案一，生产环境的配置文件放在生产环境的服务器中，以 "),t("code",[r._v("java -jar myproject.jar --spring.config.location=/xxx/yyy/application-prod.properties")]),r._v(" 命令，设置 参数 "),t("code",[r._v("spring.config.location")]),r._v(" 指向配置文件。")]),r._v(" "),t("li",[r._v("方案二，使用 Jenkins 在执行打包，配置上 Maven Profile 功能，使用服务器上的配置文件。😈 整体来说，和【方案一】的差异是，将配置文件打包进了 Jar 包中。")]),r._v(" "),t("li",[r._v("方案三，使用配置中心。")])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-配置加载顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-配置加载顺序"}},[r._v("#")]),r._v(" Spring Boot 配置加载顺序？")]),r._v(" "),t("p",[r._v("在 Spring Boot 中，除了我们常用的 application 配置文件之外，还有：")]),r._v(" "),t("ul",[t("li",[r._v("系统环境变量")]),r._v(" "),t("li",[r._v("命令行参数")]),r._v(" "),t("li",[r._v("等等…")])]),r._v(" "),t("p",[r._v("参考 "),t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Externalized Configuration》"),t("OutboundLink")],1),r._v(" 文档，我们整理顺序如下：")]),r._v(" "),t("ol",[t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("spring-boot-devtools\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br")])]),t("p",[r._v("依赖的")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("spring-boot-devtools.properties\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br")])]),t("p",[r._v("配置文件。")]),r._v(" "),t("blockquote",[t("p",[r._v("这个灰常小众，具体说明可以看看 "),t("a",{attrs:{href:"https://blog.csdn.net/u011499747/article/details/71746325",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot参考文档（12）开发者工具》"),t("OutboundLink")],1),r._v(" ，建议无视。")])])]),r._v(" "),t("li",[t("p",[r._v("单元测试上的")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("@TestPropertySource\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br")])]),t("p",[r._v("和")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("@SpringBootTest\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br")])]),t("p",[r._v("注解指定的参数。")]),r._v(" "),t("blockquote",[t("p",[r._v("前者的优先级高于后者。可以看看 "),t("a",{attrs:{href:"https://segmentfault.com/a/1190000010854607",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring、Spring Boot 和TestNG 测试指南 - @TestPropertySource》"),t("OutboundLink")],1),r._v(" 一文。")])])]),r._v(" "),t("li",[t("p",[r._v("命令行指定的参数。例如 "),t("code",[r._v("java -jar springboot.jar --server.port=9090")]),r._v(" 。")])]),r._v(" "),t("li",[t("p",[r._v("命令行中的 "),t("code",[r._v("spring.application.json")]),r._v(" 指定参数。例如 "),t("code",[r._v('java -Dspring.application.json=\'{"name":"Java"}\' -jar springboot.jar')]),r._v(" 。")])]),r._v(" "),t("li",[t("p",[r._v("ServletConfig 初始化参数。")])]),r._v(" "),t("li",[t("p",[r._v("ServletContext 初始化参数。")])]),r._v(" "),t("li",[t("p",[r._v("JNDI 参数。例如 "),t("code",[r._v("java:comp/env")]),r._v(" 。")])]),r._v(" "),t("li",[t("p",[r._v("Java 系统变量，即 "),t("code",[r._v("System#getProperties()")]),r._v(" 方法对应的。")])]),r._v(" "),t("li",[t("p",[r._v("操作系统环境变量。")])]),r._v(" "),t("li",[t("p",[r._v("RandomValuePropertySource 配置的 "),t("code",[r._v("random.*")]),r._v(" 属性对应的值。")])]),r._v(" "),t("li",[t("p",[r._v("Jar "),t("strong",[r._v("外部")]),r._v("的带指定 profile 的 application 配置文件。例如 "),t("code",[r._v("application-{profile}.yaml")]),r._v(" 。")])]),r._v(" "),t("li",[t("p",[r._v("Jar "),t("strong",[r._v("内部")]),r._v("的带指定 profile 的 application 配置文件。例如 "),t("code",[r._v("application-{profile}.yaml")]),r._v(" 。")])]),r._v(" "),t("li",[t("p",[r._v("Jar "),t("strong",[r._v("外部")]),r._v(" application 配置文件。例如 "),t("code",[r._v("application.yaml")]),r._v(" 。")])]),r._v(" "),t("li",[t("p",[r._v("Jar "),t("strong",[r._v("内部")]),r._v(" application 配置文件。例如 "),t("code",[r._v("application.yaml")]),r._v(" 。")])]),r._v(" "),t("li",[t("p",[r._v("在自定义的 "),t("code",[r._v("@Configuration")]),r._v(" 类中定于的 "),t("code",[r._v("@PropertySource")]),r._v(" 。")])]),r._v(" "),t("li",[t("p",[r._v("启动的 main 方法中，定义的默认配置。即通过 "),t("code",[r._v("SpringApplication#setDefaultProperties(Map<String, Object> defaultProperties)")]),r._v(" 方法进行设置。")])])]),r._v(" "),t("p",[r._v("嘿嘿，是不是很多很长，不用真的去记住。")]),r._v(" "),t("ul",[t("li",[r._v("一般来说，面试官不会因为这个题目回答的不好，对你扣分。")]),r._v(" "),t("li",[r._v("实际使用时，做下测试即可。")]),r._v(" "),t("li",[r._v("每一种配置方式的详细说明，可以看看 "),t("a",{attrs:{href:"https://segmentfault.com/a/1190000015069140",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 参考指南（外部化配置）》"),t("OutboundLink")],1),r._v(" 。")])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-有哪些配置方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-有哪些配置方式"}},[r._v("#")]),r._v(" Spring Boot 有哪些配置方式？")]),r._v(" "),t("p",[r._v("和 Spring 一样，一共提供了三种方式。")]),r._v(" "),t("ul",[t("li",[t("p",[r._v("1、XML 配置文件。")]),r._v(" "),t("p",[r._v("Bean 所需的依赖项和服务在 XML 格式的配置文件中指定。这些配置文件通常包含许多 bean 定义和特定于应用程序的配置选项。它们通常以 bean 标签开头。例如：")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('<bean id="studentBean" class="org.edureka.firstSpring.StudentBean">\n    <property name="name" value="Edureka"></property>\n</bean>\n')])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br")])])]),r._v(" "),t("li",[t("p",[r._v("2、注解配置。")]),r._v(" "),t("p",[r._v("您可以通过在相关的类，方法或字段声明上使用注解，将 Bean 配置为组件类本身，而不是使用 XML 来描述 Bean 装配。默认情况下，Spring 容器中未打开注解装配。因此，您需要在使用它之前在 Spring 配置文件中启用它。例如：")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("<beans>\n<context:annotation-config/>\n\x3c!-- bean definitions go here --\x3e\n</beans>\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br")])])]),r._v(" "),t("li",[t("p",[r._v("3、Java Config 配置。")]),r._v(" "),t("p",[r._v("Spring 的 Java 配置是通过使用 @Bean 和 @Configuration 来实现。")]),r._v(" "),t("ul",[t("li",[t("p",[t("code",[r._v("@Bean")]),r._v(" 注解扮演与 "),t("code",[r._v("<bean />")]),r._v(" 元素相同的角色。")])]),r._v(" "),t("li",[t("p",[t("code",[r._v("@Configuration")]),r._v(" 类允许通过简单地调用同一个类中的其他 "),t("code",[r._v("@Bean")]),r._v(" 方法来定义 Bean 间依赖关系。")])]),r._v(" "),t("li",[t("p",[r._v("例如：")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("@Configuration\npublic class StudentConfig {\n    \n    @Bean\n    public StudentBean myStudent() {\n        return new StudentBean();\n    }\n    \n}\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br"),t("span",{staticClass:"line-number"},[r._v("6")]),t("br"),t("span",{staticClass:"line-number"},[r._v("7")]),t("br"),t("span",{staticClass:"line-number"},[r._v("8")]),t("br"),t("span",{staticClass:"line-number"},[r._v("9")]),t("br")])]),t("ul",[t("li",[r._v("是不是很熟悉 😈")])])])])])]),r._v(" "),t("p",[r._v("目前主要使用 "),t("strong",[r._v("Java Config")]),r._v(" 配置为主。当然，三种配置方式是可以混合使用的。例如说：")]),r._v(" "),t("ul",[t("li",[r._v("Dubbo 服务的配置，喜欢使用 XML 。")]),r._v(" "),t("li",[r._v("Spring MVC 请求的配置，喜欢使用 "),t("code",[r._v("@RequestMapping")]),r._v(" 注解。")]),r._v(" "),t("li",[r._v("Spring MVC 拦截器的配置，喜欢 Java Config 配置。")])]),r._v(" "),t("hr"),r._v(" "),t("p",[r._v("另外，现在已经是 Spring Boot 的天下，所以更加是 "),t("strong",[r._v("Java Config")]),r._v(" 配置为主。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-的核心注解是哪个"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-的核心注解是哪个"}},[r._v("#")]),r._v(" Spring Boot 的核心注解是哪个？")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("package cn.iocoder.skywalking.web01;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Web01Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Web01Application.class, args);\n    }\n\n}\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br"),t("span",{staticClass:"line-number"},[r._v("6")]),t("br"),t("span",{staticClass:"line-number"},[r._v("7")]),t("br"),t("span",{staticClass:"line-number"},[r._v("8")]),t("br"),t("span",{staticClass:"line-number"},[r._v("9")]),t("br"),t("span",{staticClass:"line-number"},[r._v("10")]),t("br"),t("span",{staticClass:"line-number"},[r._v("11")]),t("br"),t("span",{staticClass:"line-number"},[r._v("12")]),t("br"),t("span",{staticClass:"line-number"},[r._v("13")]),t("br")])]),t("ul",[t("li",[t("code",[r._v("@SpringBootApplication")]),r._v(" 注解，就是 Spring Boot 的核心注解。")])]),r._v(" "),t("p",[t("code",[r._v("org.springframework.boot.autoconfigure.@SpringBootApplication")]),r._v(" 注解的代码如下：")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('// SpringBootApplication.java\n\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters = {@Filter(\n    type = FilterType.CUSTOM,\n    classes = {TypeExcludeFilter.class}\n), @Filter(\n    type = FilterType.CUSTOM,\n    classes = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication {\n    @AliasFor(\n        annotation = EnableAutoConfiguration.class\n    )\n    Class<?>[] exclude() default {};\n\n    @AliasFor(\n        annotation = EnableAutoConfiguration.class\n    )\n    String[] excludeName() default {};\n\n    @AliasFor(\n        annotation = ComponentScan.class,\n        attribute = "basePackages"\n    )\n    String[] scanBasePackages() default {};\n\n    @AliasFor(\n        annotation = ComponentScan.class,\n        attribute = "basePackageClasses"\n    )\n    Class<?>[] scanBasePackageClasses() default {};\n}\n')])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br"),t("span",{staticClass:"line-number"},[r._v("6")]),t("br"),t("span",{staticClass:"line-number"},[r._v("7")]),t("br"),t("span",{staticClass:"line-number"},[r._v("8")]),t("br"),t("span",{staticClass:"line-number"},[r._v("9")]),t("br"),t("span",{staticClass:"line-number"},[r._v("10")]),t("br"),t("span",{staticClass:"line-number"},[r._v("11")]),t("br"),t("span",{staticClass:"line-number"},[r._v("12")]),t("br"),t("span",{staticClass:"line-number"},[r._v("13")]),t("br"),t("span",{staticClass:"line-number"},[r._v("14")]),t("br"),t("span",{staticClass:"line-number"},[r._v("15")]),t("br"),t("span",{staticClass:"line-number"},[r._v("16")]),t("br"),t("span",{staticClass:"line-number"},[r._v("17")]),t("br"),t("span",{staticClass:"line-number"},[r._v("18")]),t("br"),t("span",{staticClass:"line-number"},[r._v("19")]),t("br"),t("span",{staticClass:"line-number"},[r._v("20")]),t("br"),t("span",{staticClass:"line-number"},[r._v("21")]),t("br"),t("span",{staticClass:"line-number"},[r._v("22")]),t("br"),t("span",{staticClass:"line-number"},[r._v("23")]),t("br"),t("span",{staticClass:"line-number"},[r._v("24")]),t("br"),t("span",{staticClass:"line-number"},[r._v("25")]),t("br"),t("span",{staticClass:"line-number"},[r._v("26")]),t("br"),t("span",{staticClass:"line-number"},[r._v("27")]),t("br"),t("span",{staticClass:"line-number"},[r._v("28")]),t("br"),t("span",{staticClass:"line-number"},[r._v("29")]),t("br"),t("span",{staticClass:"line-number"},[r._v("30")]),t("br"),t("span",{staticClass:"line-number"},[r._v("31")]),t("br"),t("span",{staticClass:"line-number"},[r._v("32")]),t("br"),t("span",{staticClass:"line-number"},[r._v("33")]),t("br"),t("span",{staticClass:"line-number"},[r._v("34")]),t("br"),t("span",{staticClass:"line-number"},[r._v("35")]),t("br"),t("span",{staticClass:"line-number"},[r._v("36")]),t("br"),t("span",{staticClass:"line-number"},[r._v("37")]),t("br"),t("span",{staticClass:"line-number"},[r._v("38")]),t("br"),t("span",{staticClass:"line-number"},[r._v("39")]),t("br"),t("span",{staticClass:"line-number"},[r._v("40")]),t("br")])]),t("ul",[t("li",[t("p",[r._v("它组合了 3 个注解，详细说明，胖友看看 "),t("a",{attrs:{href:"https://blog.csdn.net/claram/article/details/75125749",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 系列：@SpringBootApplication 注解》"),t("OutboundLink")],1),r._v(" 。")])]),r._v(" "),t("li",[t("p",[t("code",[r._v("@Configuration")]),r._v(" 注解，指定类是 "),t("strong",[r._v("Bean 定义")]),r._v("的配置类。")]),r._v(" "),t("blockquote",[t("p",[t("code",[r._v("@Configuration")]),r._v(" 注解，来自 "),t("code",[r._v("spring-context")]),r._v(" 项目，用于 Java Config ，不是 Spring Boot 新带来的。")])])]),r._v(" "),t("li",[t("p",[t("code",[r._v("#ComponentScan")]),r._v(" 注解，扫描指定包下的 Bean 们。")]),r._v(" "),t("blockquote",[t("p",[t("code",[r._v("@ComponentScan")]),r._v(" 注解，来自 "),t("code",[r._v("spring-context")]),r._v(" 项目，用于 Java Config ，不是 Spring Boot 新带来的。")])])]),r._v(" "),t("li",[t("p",[t("code",[r._v("@EnableAutoConfiguration")]),r._v(" 注解，打开自动配置的功能。如果我们想要关闭某个类的自动配置，可以设置注解的 "),t("code",[r._v("exclude")]),r._v(" 或 "),t("code",[r._v("excludeName")]),r._v(" 属性。")]),r._v(" "),t("blockquote",[t("p",[t("code",[r._v("@EnableAutoConfiguration")]),r._v(" 注解，来自 "),t("code",[r._v("spring-boot-autoconfigure")]),r._v(" 项目，"),t("strong",[r._v("它才是 Spring Boot 新带来的")]),r._v("。")])])])]),r._v(" "),t("h2",{attrs:{id:"什么是-spring-boot-自动配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-boot-自动配置"}},[r._v("#")]),r._v(" 什么是 Spring Boot 自动配置？")]),r._v(" "),t("p",[r._v("在 "),t("a",{attrs:{href:"http://svip.iocoder.cn/Spring-Boot/Interview/#",target:"_blank",rel:"noopener noreferrer"}},[r._v("「Spring Boot 的核心注解是哪个？」"),t("OutboundLink")],1),r._v(" 中，我们已经看到，使用 "),t("code",[r._v("@@EnableAutoConfiguration")]),r._v(" 注解，打开 Spring Boot 自动配置的功能。具体如何实现的，可以看看如下两篇文章：")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/464d04c36fb1",target:"_blank",rel:"noopener noreferrer"}},[r._v("《@EnableAutoConfiguration 注解的工作原理》"),t("OutboundLink")],1),r._v(" 。")]),r._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/post/5b679fbc5188251aad213110",target:"_blank",rel:"noopener noreferrer"}},[r._v("《一个面试题引起的 Spring Boot 启动解析》"),t("OutboundLink")],1)]),r._v(" "),t("li",[r._v("建议，能一边调试，一边看这篇文章。调试很简单，任一搭建一个 Spring Boot 项目即可。")])]),r._v(" "),t("p",[r._v("如下是一个比较简单的总结：")]),r._v(" "),t("ol",[t("li",[r._v("Spring Boot 在启动时扫描项目所依赖的 jar 包，寻找包含"),t("code",[r._v("spring.factories")]),r._v(" 文件的 jar 包。")]),r._v(" "),t("li",[r._v("根据 "),t("code",[r._v("spring.factories")]),r._v(" 配置加载 AutoConfigure 类。")]),r._v(" "),t("li",[r._v("根据 ["),t("code",[r._v("@Conditional")]),r._v(" 等条件注解](http://svip.iocoder.cn/Spring-Boot/Interview/Spring Boot 条件注解) 的条件，进行自动配置并将 Bean 注入 Spring IoC 中。")])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-有哪几种读取配置的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-有哪几种读取配置的方式"}},[r._v("#")]),r._v(" Spring Boot 有哪几种读取配置的方式？")]),r._v(" "),t("p",[r._v("Spring Boot 目前支持 "),t("strong",[r._v("2")]),r._v(" 种读取配置：")]),r._v(" "),t("ol",[t("li",[t("p",[t("code",[r._v("@Value")]),r._v(" 注解，读取配置到属性。最最最常用。")]),r._v(" "),t("blockquote",[t("p",[r._v("另外，支持和 "),t("code",[r._v("@PropertySource")]),r._v(" 注解一起使用，指定使用的配置文件。")])])]),r._v(" "),t("li",[t("p",[t("code",[r._v("@ConfigurationProperties")]),r._v(" 注解，读取配置到类上。")]),r._v(" "),t("blockquote",[t("p",[r._v("另外，支持和 "),t("code",[r._v("@PropertySource")]),r._v(" 注解一起使用，指定使用的配置文件。")])])])]),r._v(" "),t("p",[r._v("详细的使用方式，可以参考 "),t("a",{attrs:{href:"https://aoyouzi.iteye.com/blog/2422837",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 读取配置的几种方式》"),t("OutboundLink")],1),r._v(" 。")]),r._v(" "),t("h2",{attrs:{id:"使用-spring-boot-后-项目结构是怎么样的呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-spring-boot-后-项目结构是怎么样的呢"}},[r._v("#")]),r._v(" 使用 Spring Boot 后，项目结构是怎么样的呢？")]),r._v(" "),t("p",[r._v("我们先来说说项目的分层。一般来说，主流的有两种方式：")]),r._v(" "),t("ul",[t("li",[r._v("方式一，"),t("code",[r._v("controller")]),r._v("、"),t("code",[r._v("service")]),r._v("、"),t("code",[r._v("dao")]),r._v(" 三个包，每个包下面添加相应的 XXXController、YYYService、ZZZDAO 。")]),r._v(" "),t("li",[r._v("方式二，按照业务模块分包，每个包里面放 Controller、Service、DAO 类。例如，业务模块分成 "),t("code",[r._v("user")]),r._v("、"),t("code",[r._v("order")]),r._v("、"),t("code",[r._v("item")]),r._v(" 等等包，在 "),t("code",[r._v("user")]),r._v(" 包里放 UserController、UserService、UserDAO 类。")])]),r._v(" "),t("p",[r._v("那么，使用 Spring Boot 的项目怎么分层呢？自己的想法")]),r._v(" "),t("ul",[t("li",[r._v("现在项目都会进行服务化分拆，每个项目不会特别复杂，所以建议使用【方式一】。")]),r._v(" "),t("li",[r._v("以前的项目，大多是单体的项目，动则项目几万到几十万的代码，当时多采用【方式二】。")])]),r._v(" "),t("p",[r._v("下面是一个简单的 Spring Boot 项目的 Demo ，如下所示："),t("a",{attrs:{href:"http://static.iocoder.cn/images/Spring/2018-12-26/05.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://static.iocoder.cn/images/Spring/2018-12-26/05.png",alt:"Spring Boot 项目的 Demo"}}),t("OutboundLink")],1),r._v("Spring Boot 项目的 Demo")]),r._v(" "),t("h2",{attrs:{id:"如何在-spring-boot-启动的时候运行一些特殊的代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何在-spring-boot-启动的时候运行一些特殊的代码"}},[r._v("#")]),r._v(" 如何在 Spring Boot 启动的时候运行一些特殊的代码？")]),r._v(" "),t("p",[r._v("如果需要在 SpringApplication 启动后执行一些特殊的代码，你可以实现 ApplicationRunner 或 CommandLineRunner 接口，这两个接口工作方式相同，都只提供单一的 run 方法，该方法仅在 "),t("code",[r._v("SpringApplication#run(...)")]),r._v(" 方法"),t("strong",[r._v("完成之前调用")]),r._v("。")]),r._v(" "),t("p",[r._v("一般情况下，我们不太会使用该功能。如果真需要，胖友可以详细看看 [《使用 ApplicationRunner 或 CommandLineRunner 》](https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh/IV. Spring Boot features/23.8 Using the ApplicationRunner or CommandLineRunner.html) 。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-2-x-有什么新特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-2-x-有什么新特性"}},[r._v("#")]),r._v(" Spring Boot 2.X 有什么新特性？")]),r._v(" "),t("ol",[t("li",[r._v("起步 JDK 8 和支持 JDK 9")]),r._v(" "),t("li",[r._v("第三方库的升级")]),r._v(" "),t("li",[r._v("Reactive Spring")]),r._v(" "),t("li",[r._v("HTTP/2 支持")]),r._v(" "),t("li",[r._v("配置属性的绑定")]),r._v(" "),t("li",[r._v("Gradle 插件")]),r._v(" "),t("li",[r._v("Actuator 改进")]),r._v(" "),t("li",[r._v("数据支持的改进")]),r._v(" "),t("li",[r._v("Web 的改进")]),r._v(" "),t("li",[r._v("支持 Quartz 自动配置")]),r._v(" "),t("li",[r._v("测试的改进")]),r._v(" "),t("li",[r._v("其它…")])]),r._v(" "),t("p",[r._v("详细的说明，可以看看 "),t("a",{attrs:{href:"http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解》"),t("OutboundLink")],1),r._v(" 。")]),r._v(" "),t("h1",{attrs:{id:"整合篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整合篇"}},[r._v("#")]),r._v(" 整合篇")]),r._v(" "),t("h2",{attrs:{id:"如何将内嵌服务器换成-jetty"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何将内嵌服务器换成-jetty"}},[r._v("#")]),r._v(" 如何将内嵌服务器换成 Jetty ？")]),r._v(" "),t("p",[r._v("默认情况下，"),t("code",[r._v("spring-boot-starter-web")]),r._v(" 模块使用 Tomcat 作为内嵌的服务器。所以需要去除对 "),t("code",[r._v("spring-boot-starter-tomcat")]),r._v(" 模块的引用，添加 "),t("code",[r._v("spring-boot-starter-jetty")]),r._v(" 模块的引用。代码如下：")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion> \x3c!-- 去除 Tomcat --\x3e\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency> \x3c!-- 引入 Jetty --\x3e\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jetty</artifactId>\n</dependency>\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br"),t("span",{staticClass:"line-number"},[r._v("6")]),t("br"),t("span",{staticClass:"line-number"},[r._v("7")]),t("br"),t("span",{staticClass:"line-number"},[r._v("8")]),t("br"),t("span",{staticClass:"line-number"},[r._v("9")]),t("br"),t("span",{staticClass:"line-number"},[r._v("10")]),t("br"),t("span",{staticClass:"line-number"},[r._v("11")]),t("br"),t("span",{staticClass:"line-number"},[r._v("12")]),t("br"),t("span",{staticClass:"line-number"},[r._v("13")]),t("br"),t("span",{staticClass:"line-number"},[r._v("14")]),t("br")])]),t("h2",{attrs:{id:"spring-boot-中的监视器-actuator-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中的监视器-actuator-是什么"}},[r._v("#")]),r._v(" Spring Boot 中的监视器 Actuator 是什么？")]),r._v(" "),t("p",[t("code",[r._v("spring-boot-actuator")]),r._v(" 提供 Spring Boot 的监视器功能，可帮助我们访问生产环境中正在运行的应用程序的"),t("strong",[r._v("当前状态")]),r._v("。")]),r._v(" "),t("ul",[t("li",[r._v("关于 Spring Boot Actuator 的教程，可以看看 "),t("a",{attrs:{href:"https://www.jianshu.com/p/af9738634a21",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot Actuator 使用》"),t("OutboundLink")],1),r._v(" 。")]),r._v(" "),t("li",[r._v("上述教程是基于 Spring Boot 1.X 的版本，如果胖友使用 Spring Boot 2.X 的版本，你将会发现 "),t("code",[r._v("/beans")]),r._v(" 等 Endpoint 是不存在的，参考 "),t("a",{attrs:{href:"https://stackoverflow.com/questions/49174700/spring-boot-2-actuator-endpoint-where-is-beans-endpoint",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring boot 2 - Actuator endpoint, where is /beans endpoint》"),t("OutboundLink")],1),r._v(" 问题来解决。")])]),r._v(" "),t("p",[t("strong",[r._v("安全性")])]),r._v(" "),t("p",[r._v("Spring Boot 2.X 默认情况下，"),t("code",[r._v("spring-boot-actuator")]),r._v(" 产生的 Endpoint 是没有安全保护的，但是 Actuator 可能暴露敏感信息。")]),r._v(" "),t("p",[r._v("所以一般的做法是，引入 "),t("code",[r._v("spring-boot-start-security")]),r._v(" 依赖，使用 Spring Security 对它们进行安全保护。")]),r._v(" "),t("h2",{attrs:{id:"如何集成-spring-boot-和-spring-mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-spring-boot-和-spring-mvc"}},[r._v("#")]),r._v(" 如何集成 Spring Boot 和 Spring MVC ？")]),r._v(" "),t("ol",[t("li",[t("p",[r._v("引入 "),t("code",[r._v("spring-boot-starter-web")]),r._v(" 的依赖。")])]),r._v(" "),t("li",[t("p",[r._v("实现 WebMvcConfigurer 接口，可添加自定义的 Spring MVC 配置。")]),r._v(" "),t("blockquote",[t("p",[r._v("因为 Spring Boot 2 基于 JDK 8 的版本，而 JDK 8 提供 "),t("code",[r._v("default")]),r._v(" 方法，所以 Spring Boot 2 废弃了 WebMvcConfigurerAdapter 适配类，直接使用 WebMvcConfigurer 即可。")])]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("// WebMvcConfigurer.java\npublic interface WebMvcConfigurer {\n\n    /** 配置路径匹配器 **/\n    default void configurePathMatch(PathMatchConfigurer configurer) {}\n    \n    /** 配置内容裁决的一些选项 **/\n    default void configureContentNegotiation(ContentNegotiationConfigurer configurer) { }\n\n    /** 异步相关的配置 **/\n    default void configureAsyncSupport(AsyncSupportConfigurer configurer) { }\n\n    default void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) { }\n\n    default void addFormatters(FormatterRegistry registry) {\n    }\n\n    /** 添加拦截器 **/\n    default void addInterceptors(InterceptorRegistry registry) { }\n\n    /** 静态资源处理 **/\n    default void addResourceHandlers(ResourceHandlerRegistry registry) { }\n\n    /** 解决跨域问题 **/\n    default void addCorsMappings(CorsRegistry registry) { }\n\n    default void addViewControllers(ViewControllerRegistry registry) { }\n\n    /** 配置视图解析器 **/\n    default void configureViewResolvers(ViewResolverRegistry registry) { }\n\n    /** 添加参数解析器 **/\n    default void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {\n    }\n\n    /** 添加返回值处理器 **/\n    default void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers) { }\n\n    /** 这里配置视图解析器 **/\n    default void configureMessageConverters(List<HttpMessageConverter<?>> converters) { }\n\n    /** 配置消息转换器 **/\n    default void extendMessageConverters(List<HttpMessageConverter<?>> converters) { }\n\n   /** 配置异常处理器 **/\n    default void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) { }\n\n    default void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) { }\n\n    @Nullable\n    default Validator getValidator() { return null; }\n\n    @Nullable\n    default MessageCodesResolver getMessageCodesResolver() {  return null; }\n\n}\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br"),t("span",{staticClass:"line-number"},[r._v("6")]),t("br"),t("span",{staticClass:"line-number"},[r._v("7")]),t("br"),t("span",{staticClass:"line-number"},[r._v("8")]),t("br"),t("span",{staticClass:"line-number"},[r._v("9")]),t("br"),t("span",{staticClass:"line-number"},[r._v("10")]),t("br"),t("span",{staticClass:"line-number"},[r._v("11")]),t("br"),t("span",{staticClass:"line-number"},[r._v("12")]),t("br"),t("span",{staticClass:"line-number"},[r._v("13")]),t("br"),t("span",{staticClass:"line-number"},[r._v("14")]),t("br"),t("span",{staticClass:"line-number"},[r._v("15")]),t("br"),t("span",{staticClass:"line-number"},[r._v("16")]),t("br"),t("span",{staticClass:"line-number"},[r._v("17")]),t("br"),t("span",{staticClass:"line-number"},[r._v("18")]),t("br"),t("span",{staticClass:"line-number"},[r._v("19")]),t("br"),t("span",{staticClass:"line-number"},[r._v("20")]),t("br"),t("span",{staticClass:"line-number"},[r._v("21")]),t("br"),t("span",{staticClass:"line-number"},[r._v("22")]),t("br"),t("span",{staticClass:"line-number"},[r._v("23")]),t("br"),t("span",{staticClass:"line-number"},[r._v("24")]),t("br"),t("span",{staticClass:"line-number"},[r._v("25")]),t("br"),t("span",{staticClass:"line-number"},[r._v("26")]),t("br"),t("span",{staticClass:"line-number"},[r._v("27")]),t("br"),t("span",{staticClass:"line-number"},[r._v("28")]),t("br"),t("span",{staticClass:"line-number"},[r._v("29")]),t("br"),t("span",{staticClass:"line-number"},[r._v("30")]),t("br"),t("span",{staticClass:"line-number"},[r._v("31")]),t("br"),t("span",{staticClass:"line-number"},[r._v("32")]),t("br"),t("span",{staticClass:"line-number"},[r._v("33")]),t("br"),t("span",{staticClass:"line-number"},[r._v("34")]),t("br"),t("span",{staticClass:"line-number"},[r._v("35")]),t("br"),t("span",{staticClass:"line-number"},[r._v("36")]),t("br"),t("span",{staticClass:"line-number"},[r._v("37")]),t("br"),t("span",{staticClass:"line-number"},[r._v("38")]),t("br"),t("span",{staticClass:"line-number"},[r._v("39")]),t("br"),t("span",{staticClass:"line-number"},[r._v("40")]),t("br"),t("span",{staticClass:"line-number"},[r._v("41")]),t("br"),t("span",{staticClass:"line-number"},[r._v("42")]),t("br"),t("span",{staticClass:"line-number"},[r._v("43")]),t("br"),t("span",{staticClass:"line-number"},[r._v("44")]),t("br"),t("span",{staticClass:"line-number"},[r._v("45")]),t("br"),t("span",{staticClass:"line-number"},[r._v("46")]),t("br"),t("span",{staticClass:"line-number"},[r._v("47")]),t("br"),t("span",{staticClass:"line-number"},[r._v("48")]),t("br"),t("span",{staticClass:"line-number"},[r._v("49")]),t("br"),t("span",{staticClass:"line-number"},[r._v("50")]),t("br"),t("span",{staticClass:"line-number"},[r._v("51")]),t("br"),t("span",{staticClass:"line-number"},[r._v("52")]),t("br"),t("span",{staticClass:"line-number"},[r._v("53")]),t("br"),t("span",{staticClass:"line-number"},[r._v("54")]),t("br"),t("span",{staticClass:"line-number"},[r._v("55")]),t("br"),t("span",{staticClass:"line-number"},[r._v("56")]),t("br")])])])]),r._v(" "),t("hr"),r._v(" "),t("p",[r._v("在使用 Spring MVC 时，我们一般会做如下几件事情：")]),r._v(" "),t("ol",[t("li",[r._v("实现自己项目需要的拦截器，并在 WebMvcConfigurer 实现类中配置。可参见 "),t("a",{attrs:{href:"https://github.com/YunaiV/oceans/blob/2a2d3746905f1349e260e88049e7e28346c7648f/bff/webapp-bff/src/main/java/cn/iocoder/oceans/webapp/bff/config/MVCConfiguration.java",target:"_blank",rel:"noopener noreferrer"}},[r._v("MVCConfiguration"),t("OutboundLink")],1),r._v(" 类。")]),r._v(" "),t("li",[r._v("配置 "),t("code",[r._v("@ControllerAdvice")]),r._v(" + "),t("code",[r._v("@ExceptionHandler")]),r._v(" 注解，实现全局异常处理。可参见 "),t("a",{attrs:{href:"https://github.com/YunaiV/oceans/blob/2a2d3746905f1349e260e88049e7e28346c7648f/bff/webapp-bff/src/main/java/cn/iocoder/oceans/webapp/bff/config/GlobalExceptionHandler.java",target:"_blank",rel:"noopener noreferrer"}},[r._v("GlobalExceptionHandler"),t("OutboundLink")],1),r._v(" 类。")]),r._v(" "),t("li",[r._v("配置 "),t("code",[r._v("@ControllerAdvice")]),r._v(" ，实现 ResponseBodyAdvice 接口，实现全局统一返回。可参见 "),t("a",{attrs:{href:"https://github.com/YunaiV/oceans/blob/2a2d3746905f1349e260e88049e7e28346c7648f/bff/webapp-bff/src/main/java/cn/iocoder/oceans/webapp/bff/config/GlobalResponseBodyAdvice.java",target:"_blank",rel:"noopener noreferrer"}},[r._v("GlobalResponseBodyAdvice"),t("OutboundLink")],1),r._v(" 。")])]),r._v(" "),t("p",[r._v("当然，有一点需要注意，WebMvcConfigurer、ResponseBodyAdvice、"),t("code",[r._v("@ControllerAdvice")]),r._v("、"),t("code",[r._v("@ExceptionHandler")]),r._v(" 接口，都是 Spring MVC 框架自身已经有的东西。")]),r._v(" "),t("ul",[t("li",[t("code",[r._v("spring-boot-starter-web")]),r._v(" 的依赖，帮我们解决的是 Spring MVC 的依赖以及相关的 Tomcat 等组件。")])]),r._v(" "),t("h2",{attrs:{id:"如何集成-spring-boot-和-spring-security"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-spring-boot-和-spring-security"}},[r._v("#")]),r._v(" 如何集成 Spring Boot 和 Spring Security ？")]),r._v(" "),t("p",[r._v("目前比较主流的安全框架有两个：")]),r._v(" "),t("ol",[t("li",[r._v("Spring Security")]),r._v(" "),t("li",[r._v("Apache Shiro")])]),r._v(" "),t("p",[r._v("对于任何项目来说，安全认证总是少不了，同样适用于使用 Spring Boot 的项目。相对来说，Spring Security 现在会比 Apache Shiro 更流行。")]),r._v(" "),t("p",[r._v("Spring Boot 和 Spring Security 的配置方式比较简单：")]),r._v(" "),t("ol",[t("li",[r._v("引入 "),t("code",[r._v("spring-boot-starter-security")]),r._v(" 的依赖。")]),r._v(" "),t("li",[r._v("继承 WebSecurityConfigurerAdapter ，添加"),t("strong",[r._v("自定义")]),r._v("的安全配置。")])]),r._v(" "),t("p",[r._v("当然，每个项目的安全配置是不同的，需要胖友自己选择。更多详细的使用，建议认真阅读如下文章：")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://blog.didispace.com/springbootsecurity/",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot中 使用 Spring Security 进行安全控制》"),t("OutboundLink")],1),r._v(" ，快速上手。")]),r._v(" "),t("li",[t("a",{attrs:{href:"http://www.iocoder.cn/Spring-Security/good-collection/",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Security 实现原理与源码解析系统 —— 精品合集》"),t("OutboundLink")],1),r._v(" ，深入源码。")])]),r._v(" "),t("p",[r._v("另外，安全是一个很大的话题，感兴趣的胖友，可以看看 "),t("a",{attrs:{href:"https://www.jdon.com/49653",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 十种安全措施》"),t("OutboundLink")],1),r._v(" 一文。")]),r._v(" "),t("h2",{attrs:{id:"如何集成-spring-boot-和-spring-security-oauth2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-spring-boot-和-spring-security-oauth2"}},[r._v("#")]),r._v(" 如何集成 Spring Boot 和 Spring Security OAuth2 ？")]),r._v(" "),t("p",[r._v("参见 "),t("a",{attrs:{href:"http://www.iocoder.cn/Spring-Security/OAuth2-learning/",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Security OAuth2 入门》"),t("OutboundLink")],1),r._v(" 文章，内容有点多。")]),r._v(" "),t("h2",{attrs:{id:"如何集成-spring-boot-和-jpa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-spring-boot-和-jpa"}},[r._v("#")]),r._v(" 如何集成 Spring Boot 和 JPA ？")]),r._v(" "),t("ol",[t("li",[r._v("引入 "),t("code",[r._v("spring-boot-starter-data-jpa")]),r._v(" 的依赖。")]),r._v(" "),t("li",[r._v("在 application 配置文件中，加入 JPA 相关的少量配置。当然，数据库的配置也要添加进去。")]),r._v(" "),t("li",[r._v("具体编码。")])]),r._v(" "),t("p",[r._v("详细的使用，胖友可以参考：")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.iocoder.cn/Spring-Boot/battcn/v2-orm-jpa/",target:"_blank",rel:"noopener noreferrer"}},[r._v("《一起来学 SpringBoot 2.x | 第六篇：整合 Spring Data JPA》"),t("OutboundLink")],1)])]),r._v(" "),t("p",[r._v("有两点需要注意：")]),r._v(" "),t("ul",[t("li",[r._v("Spring Boot 2 默认使用的数据库连接池是 "),t("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP",target:"_blank",rel:"noopener noreferrer"}},[r._v("HikariCP"),t("OutboundLink")],1),r._v(" ，目前最好的性能的数据库连接池的实现。")]),r._v(" "),t("li",[t("code",[r._v("spring-boot-starter-data-jpa")]),r._v(" 的依赖，使用的默认 JPA 实现是 Hibernate 5.X 。")])]),r._v(" "),t("h2",{attrs:{id:"如何集成-spring-boot-和-mybatis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-spring-boot-和-mybatis"}},[r._v("#")]),r._v(" 如何集成 Spring Boot 和 MyBatis ？")]),r._v(" "),t("ol",[t("li",[r._v("引入 "),t("code",[r._v("mybatis-spring-boot-starter")]),r._v(" 的依赖。")]),r._v(" "),t("li",[r._v("在 application 配置文件中，加入 MyBatis 相关的少量配置。当然，数据库的配置也要添加进去。")]),r._v(" "),t("li",[r._v("具体编码。")])]),r._v(" "),t("p",[r._v("详细的使用，胖友可以参考：")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.iocoder.cn/Spring-Boot/battcn/v2-orm-mybatis/",target:"_blank",rel:"noopener noreferrer"}},[r._v("《一起来学 SpringBoot 2.x | 第七篇：整合 Mybatis》"),t("OutboundLink")],1)])]),r._v(" "),t("h2",{attrs:{id:"如何集成-spring-boot-和-rabbitmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-spring-boot-和-rabbitmq"}},[r._v("#")]),r._v(" 如何集成 Spring Boot 和 RabbitMQ ？")]),r._v(" "),t("ol",[t("li",[r._v("引入 "),t("code",[r._v("spring-boot-starter-amqp")]),r._v(" 的依赖")]),r._v(" "),t("li",[r._v("在 application 配置文件中，加入 RabbitMQ 相关的少量配置。")]),r._v(" "),t("li",[r._v("具体编码。")])]),r._v(" "),t("p",[r._v("详细的使用，胖友可以参考：")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.iocoder.cn/Spring-Boot/battcn/v2-queue-rabbitmq/",target:"_blank",rel:"noopener noreferrer"}},[r._v("《一起来学 SpringBoot 2.x | 第十二篇：初探 RabbitMQ 消息队列》"),t("OutboundLink")],1)]),r._v(" "),t("li",[t("a",{attrs:{href:"http://www.iocoder.cn/Spring-Boot/battcn/v2-queue-rabbitmq-delay/",target:"_blank",rel:"noopener noreferrer"}},[r._v("《一起来学 SpringBoot 2.x | 第十三篇：RabbitMQ 延迟队列》"),t("OutboundLink")],1)])]),r._v(" "),t("h2",{attrs:{id:"如何集成-spring-boot-和-kafka"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-spring-boot-和-kafka"}},[r._v("#")]),r._v(" 如何集成 Spring Boot 和 Kafka ？")]),r._v(" "),t("ol",[t("li",[r._v("引入 "),t("code",[r._v("spring-kafka")]),r._v(" 的依赖。")]),r._v(" "),t("li",[r._v("在 application 配置文件中，加入 Kafka 相关的少量配置。")]),r._v(" "),t("li",[r._v("具体编码。")])]),r._v(" "),t("p",[r._v("详细的使用，胖友可以参考：")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.54tianzhisheng.cn/2018/01/05/SpringBoot-Kafka/",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot系列文章（一）：SpringBoot Kafka 整合使用》"),t("OutboundLink")],1)])]),r._v(" "),t("h2",{attrs:{id:"如何集成-spring-boot-和-rocketmq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-spring-boot-和-rocketmq"}},[r._v("#")]),r._v(" 如何集成 Spring Boot 和 RocketMQ ？")]),r._v(" "),t("ol",[t("li",[r._v("引入 "),t("code",[r._v("rocketmq-spring-boot")]),r._v(" 的依赖。")]),r._v(" "),t("li",[r._v("在 application 配置文件中，加入 RocketMQ 相关的少量配置。")]),r._v(" "),t("li",[r._v("具体编码。")])]),r._v(" "),t("p",[r._v("详细的使用，胖友可以参考：")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.iocoder.cn/RocketMQ/start/spring-boot-example",target:"_blank",rel:"noopener noreferrer"}},[r._v("《我用这种方法在 Spring 中实现消息的发送和消费》"),t("OutboundLink")],1)])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-支持哪些日志框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-支持哪些日志框架"}},[r._v("#")]),r._v(" Spring Boot 支持哪些日志框架？")]),r._v(" "),t("p",[r._v("Spring Boot 支持的日志框架有：")]),r._v(" "),t("ul",[t("li",[r._v("Logback")]),r._v(" "),t("li",[r._v("Log4j2")]),r._v(" "),t("li",[r._v("Log4j")]),r._v(" "),t("li",[r._v("Java Util Logging")])]),r._v(" "),t("p",[r._v("默认使用的是 Logback 日志框架，也是目前较为推荐的，具体配置，可以参见 "),t("a",{attrs:{href:"http://www.iocoder.cn/Spring-Boot/battcn/v2-config-logs/",target:"_blank",rel:"noopener noreferrer"}},[r._v("《一起来学 SpringBoot 2.x | 第三篇：SpringBoot 日志配置》"),t("OutboundLink")],1),r._v(" 。")]),r._v(" "),t("p",[r._v("因为 Log4j2 的性能更加优秀，也有人在生产上使用，可以参考 "),t("a",{attrs:{href:"https://www.jianshu.com/p/f18a9cff351d",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot Log4j2 日志性能之巅》"),t("OutboundLink")],1),r._v(" 配置。")]),r._v(" "),t("h2",{attrs:{id:"参考和推荐如下文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考和推荐如下文章"}},[r._v("#")]),r._v(" 参考和推荐如下文章：")]),r._v(" "),t("ul",[t("li",[r._v("我有面试宝典 [《"),t("a",{attrs:{href:"http://www.wityx.com/post/242_1_1.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("经验分享] Spring Boot面试题总结》"),t("OutboundLink")],1)]),r._v(" "),t("li",[r._v("Java 知音 "),t("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1348086",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot 面试题精华》"),t("OutboundLink")],1)]),r._v(" "),t("li",[r._v("祖大帅 "),t("a",{attrs:{href:"https://juejin.im/post/5b679fbc5188251aad213110",target:"_blank",rel:"noopener noreferrer"}},[r._v("《一个面试题引起的 Spring Boot 启动解析》"),t("OutboundLink")],1)]),r._v(" "),t("li",[r._v("大胡子叔叔_ "),t("a",{attrs:{href:"https://blog.csdn.net/panhaigang123/article/details/79587612",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot + Spring Cloud 相关面试题》"),t("OutboundLink")],1)]),r._v(" "),t("li",[r._v("墨斗鱼博客 "),t("a",{attrs:{href:"https://www.mudouyu.com/article/26",target:"_blank",rel:"noopener noreferrer"}},[r._v("《20 道 Spring Boot 面试题》"),t("OutboundLink")],1)]),r._v(" "),t("li",[r._v("夕阳雨晴 "),t("a",{attrs:{href:"https://blog.csdn.net/sun1021873926/article/details/78176354",target:"_blank",rel:"noopener noreferrer"}},[r._v("《Spring Boot Starter 的面试题》"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);