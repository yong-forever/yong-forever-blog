(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{401:function(e,t,a){"use strict";a.r(t);var s=a(4),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("title: 面试问题集锦\ndate: 2024-02-05 10:10:06\npermalink: /pages/aea6571b7a8bae86\ncategories:")]),e._v(" "),t("ul",[t("li",[e._v("更多")]),e._v(" "),t("li",[e._v("面试\ntags:")]),e._v(" "),t("li",[e._v("null\nauthor:\nname: yong-forever\nlink: https://github.com/yong-forever")])]),e._v(" "),t("h2",{attrs:{id:"mybatis-编程步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-编程步骤"}},[e._v("#")]),e._v(" MyBatis 编程步骤")]),e._v(" "),t("ol",[t("li",[e._v("创建 SqlSessionFactory 对象。")]),e._v(" "),t("li",[e._v("通过 SqlSessionFactory 获取 SqlSession 对象。")]),e._v(" "),t("li",[e._v("通过 SqlSession 获得 Mapper 代理对象。")]),e._v(" "),t("li",[e._v("通过 Mapper 代理对象，执行数据库操作。")]),e._v(" "),t("li",[e._v("执行成功，则使用 SqlSession 提交事务。")]),e._v(" "),t("li",[e._v("执行失败，则使用 SqlSession 回滚事务。")]),e._v(" "),t("li",[e._v("最终，关闭会话。")])]),e._v(" "),t("h2",{attrs:{id:"和-的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别是什么"}},[e._v("#")]),e._v(" "),t("code",[e._v("#{}")]),e._v(" 和 "),t("code",[e._v("${}")]),e._v(" 的区别是什么？")]),e._v(" "),t("p",[t("code",[e._v("${}")]),e._v(" 是 Properties 文件中的变量占位符，它可以用于 XML 标签属性值和 SQL 内部，属于"),t("strong",[e._v("字符串替换")]),e._v("。例如将 "),t("code",[e._v("${driver}")]),e._v(" 会被静态替换为 "),t("code",[e._v("com.mysql.jdbc.Driver")]),e._v(" ：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<dataSource type="UNPOOLED">\n    <property name="driver" value="${driver}"/>\n    <property name="url" value="${url}"/>\n    <property name="username" value="${username}"/>\n</dataSource>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("code",[e._v("${}")]),e._v(" 也可以对传递进来的参数"),t("strong",[e._v("原样拼接")]),e._v("在 SQL 中。代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<select id="getSubject3" parameterType="Integer" resultType="Subject">\n    SELECT * FROM subject\n    WHERE id = ${id}\n</select>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("ul",[t("li",[e._v("实际场景下，不推荐这么做。因为，可能有 SQL 注入的风险。")])]),e._v(" "),t("hr"),e._v(" "),t("p",[t("code",[e._v("#{}")]),e._v(" 是 SQL 的参数占位符，Mybatis 会将 SQL 中的 "),t("code",[e._v("#{}")]),e._v(" 替换为 "),t("code",[e._v("?")]),e._v(" 号，在 SQL 执行前会使用 PreparedStatement 的参数设置方法，按序给 SQL 的 "),t("code",[e._v("?")]),e._v(" 号占位符设置参数值，比如 "),t("code",[e._v("ps.setInt(0, parameterValue)")]),e._v(" 。 所以，"),t("code",[e._v("#{}")]),e._v(" 是"),t("strong",[e._v("预编译处理")]),e._v("，可以有效防止 SQL 注入，提高系统安全性。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("另外，"),t("code",[e._v("#{}")]),e._v(" 和 "),t("code",[e._v("${}")]),e._v(" 的取值方式非常方便。例如："),t("code",[e._v("#{item.name}")]),e._v(" 的取值方式，为使用反射从参数对象中，获取 "),t("code",[e._v("item")]),e._v(" 对象的 "),t("code",[e._v("name")]),e._v(" 属性值，相当于 "),t("code",[e._v("param.getItem().getName()")]),e._v(" 。")]),e._v(" "),t("h2",{attrs:{id:"当实体类中的属性名和表中的字段名不一样-怎么办"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当实体类中的属性名和表中的字段名不一样-怎么办"}},[e._v("#")]),e._v(" 当实体类中的属性名和表中的字段名不一样 ，怎么办？")]),e._v(" "),t("p",[e._v("第一种， 通过在查询的 SQL 语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<select id="selectOrder" parameterType="Integer" resultType="Order"> \n    SELECT order_id AS id, order_no AS orderno, order_price AS price \n    FROM orders \n    WHERE order_id = #{id}\n</select>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("ul",[t("li",[e._v("这里，还有几点建议：\n"),t("ul",[t("li",[e._v("1、数据库的关键字，统一使用大写，例如："),t("code",[e._v("SELECT")]),e._v("、"),t("code",[e._v("AS")]),e._v("、"),t("code",[e._v("FROM")]),e._v("、"),t("code",[e._v("WHERE")]),e._v(" 。")]),e._v(" "),t("li",[e._v("2、每 5 个查询字段换一行，保持整齐。")]),e._v(" "),t("li",[e._v("3、"),t("code",[e._v(",")]),e._v(" 的后面，和 "),t("code",[e._v("=")]),e._v(" 的前后，需要有空格，更加清晰。")]),e._v(" "),t("li",[e._v("4、"),t("code",[e._v("SELECT")]),e._v("、"),t("code",[e._v("FROM")]),e._v("、"),t("code",[e._v("WHERE")]),e._v(" 等，单独一行，高端大气。")])])])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("第二种，是第一种的特殊情况。大多数场景下，数据库字段名和实体类中的属性名差，主要是前者为"),t("strong",[e._v("下划线风格")]),e._v("，后者为"),t("strong",[e._v("驼峰风格")]),e._v("。在这种情况下，可以直接配置如下，实现自动的下划线转驼峰的功能。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<setting name="logImpl" value="LOG4J"/>\n    <setting name="mapUnderscoreToCamelCase" value="true" />\n</settings>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("😈 也就说，约定大于配置。非常推荐！")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("第三种，通过 "),t("code",[e._v("<resultMap>")]),e._v(" 来映射字段名和实体类属性名的一一对应的关系。代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<resultMap type="me.gacl.domain.Order" id=”OrderResultMap”> \n    <!–- 用 id 属性来映射主键字段 -–> \n    <id property="id" column="order_id"> \n    <!–- 用 result 属性来映射非主键字段，property 为实体类属性名，column 为数据表中的属性 -–> \n    <result property="orderNo" column ="order_no" /> \n    <result property="price" column="order_price" /> \n</resultMap>\n\n<select id="getOrder" parameterType="Integer" resultMap="OrderResultMap">\n    SELECT * \n    FROM orders \n    WHERE order_id = #{id}\n</select>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("ul",[t("li",[e._v("此处 "),t("code",[e._v("SELECT *")]),e._v(" 仅仅作为示例只用，实际场景下，千万千万千万不要这么干。用多少字段，查询多少字段。")]),e._v(" "),t("li",[e._v("相比第一种，第三种的"),t("strong",[e._v("重用性")]),e._v("会一些。")])]),e._v(" "),t("h2",{attrs:{id:"xml-映射文件中-除了常见的-select-insert-update-delete标-签之外-还有哪些标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xml-映射文件中-除了常见的-select-insert-update-delete标-签之外-还有哪些标签"}},[e._v("#")]),e._v(" XML 映射文件中，除了常见的 select | insert | update | delete标 签之外，还有哪些标签？")]),e._v(" "),t("p",[e._v("如下部分，可见 "),t("a",{attrs:{href:"http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("《MyBatis 文档 —— Mapper XML 文件》"),t("OutboundLink")],1),e._v(" ：")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<cache />\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("标签，给定命名空间的缓存配置。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("<cache-ref />")]),e._v(" 标签，其他命名空间缓存配置的引用。")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("<resultMap />")]),e._v(" 标签，是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。")])]),e._v(" "),t("li",[t("p",[t("s",[e._v("`` 标签，已废弃！老式风格的参数映射。内联参数是首选,这个元素可能在将来被移除，这里不会记录。")])])]),e._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<sql />\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("标签，可被其他语句引用的可重用语句块。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("<include />")]),e._v(" 标签，引用 "),t("code",[e._v("<sql />")]),e._v(" 标签的语句。")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("<selectKey />")]),e._v(" 标签，不支持自增的主键生成策略标签。")])])]),e._v(" "),t("p",[e._v("如下部分，可见 "),t("a",{attrs:{href:"http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("《MyBatis 文档 —— 动态 SQL》"),t("OutboundLink")],1),e._v(" ：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("<if />")])]),e._v(" "),t("li",[t("code",[e._v("<choose />")]),e._v("、"),t("code",[e._v("<when />")]),e._v("、"),t("code",[e._v("<otherwise />")])]),e._v(" "),t("li",[t("code",[e._v("<trim />")]),e._v("、"),t("code",[e._v("<where />")]),e._v("、"),t("code",[e._v("<set />")])]),e._v(" "),t("li",[t("code",[e._v("<foreach />")])]),e._v(" "),t("li",[t("code",[e._v("<bind />")])])]),e._v(" "),t("h2",{attrs:{id:"mybatis-动态-sql-是做什么的-都有哪些动态-sql-能简述一下动态-sql-的执行原理吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-动态-sql-是做什么的-都有哪些动态-sql-能简述一下动态-sql-的执行原理吗"}},[e._v("#")]),e._v(" Mybatis 动态 SQL 是做什么的？都有哪些动态 SQL ？能简述一下动态 SQL 的执行原理吗？")]),e._v(" "),t("ul",[t("li",[e._v("Mybatis 动态 SQL ，可以让我们在 XML 映射文件内，以 XML 标签的形式编写动态 SQL ，完成逻辑判断和动态拼接 SQL 的功能。")]),e._v(" "),t("li",[e._v("Mybatis 提供了 9 种动态 SQL 标签："),t("code",[e._v("<if />")]),e._v("、"),t("code",[e._v("<choose />")]),e._v("、"),t("code",[e._v("<when />")]),e._v("、"),t("code",[e._v("<otherwise />")]),e._v("、"),t("code",[e._v("<trim />")]),e._v("、"),t("code",[e._v("<where />")]),e._v("、"),t("code",[e._v("<set />")]),e._v("、"),t("code",[e._v("<foreach />")]),e._v("、"),t("code",[e._v("<bind />")]),e._v(" 。")]),e._v(" "),t("li",[e._v("其执行原理为，使用 "),t("strong",[e._v("OGNL")]),e._v(" 的表达式，从 SQL 参数对象中计算表达式的值，根据表达式的值动态拼接 SQL ，以此来完成动态 SQL 的功能。")])]),e._v(" "),t("p",[e._v("如上的内容，更加详细的话，请看 "),t("a",{attrs:{href:"http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("《MyBatis 文档 —— 动态 SQL》"),t("OutboundLink")],1),e._v(" 文档。")]),e._v(" "),t("h2",{attrs:{id:"最佳实践中-通常一个-xml-映射文件-都会写一个-mapper-接口与之对应。请问-这个-mapper-接口的工作原理是什么-mapper-接口里的方法-参数不同时-方法能重载吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践中-通常一个-xml-映射文件-都会写一个-mapper-接口与之对应。请问-这个-mapper-接口的工作原理是什么-mapper-接口里的方法-参数不同时-方法能重载吗"}},[e._v("#")]),e._v(" 最佳实践中，通常一个 XML 映射文件，都会写一个 Mapper 接口与之对应。请问，这个 Mapper 接口的工作原理是什么？Mapper 接口里的方法，参数不同时，方法能重载吗？")]),e._v(" "),t("p",[e._v("Mapper 接口，对应的关系如下：")]),e._v(" "),t("ul",[t("li",[e._v("接口的全限名，就是映射文件中的 "),t("code",[e._v('"namespace"')]),e._v(" 的值。")]),e._v(" "),t("li",[e._v("接口的方法名，就是映射文件中 MappedStatement 的 "),t("code",[e._v('"id"')]),e._v(" 值。")]),e._v(" "),t("li",[e._v("接口方法内的参数，就是传递给 SQL 的参数。")])]),e._v(" "),t("p",[e._v("Mapper 接口是没有实现类的，当调用接口方法时，接口全限名 + 方法名拼接字符串作为 key 值，可唯一定位一个对应的 MappedStatement 。举例："),t("code",[e._v("com.mybatis3.mappers.StudentDao.findStudentById")]),e._v(" ，可以唯一找到 "),t("code",[e._v('"namespace"')]),e._v(" 为 "),t("code",[e._v("com.mybatis3.mappers.StudentDao")]),e._v(" 下面 "),t("code",[e._v('"id"')]),e._v(" 为 "),t("code",[e._v("findStudentById")]),e._v(" 的 MappedStatement 。")]),e._v(" "),t("p",[e._v("总结来说，在 Mybatis 中，每一个 "),t("code",[e._v("<select />")]),e._v("、"),t("code",[e._v("<insert />")]),e._v("、"),t("code",[e._v("<update />")]),e._v("、"),t("code",[e._v("<delete />")]),e._v(" 标签，都会被解析为一个 MappedStatement 对象。")]),e._v(" "),t("p",[e._v("另外，Mapper 接口的实现类，通过 MyBatis 使用 "),t("strong",[e._v("JDK Proxy")]),e._v(" 自动生成其代理对象 Proxy ，而代理对象 Proxy 会拦截接口方法，从而“调用”对应的 MappedStatement 方法，最终执行 SQL ，返回执行结果。整体流程如下图："),t("a",{attrs:{href:"http://static.iocoder.cn/images/MyBatis/2020_03_15/02.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"http://static.iocoder.cn/images/MyBatis/2020_03_15/02.png",alt:"流程"}}),t("OutboundLink")],1),e._v("流程")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("其中，SqlSession 在调用 Executor 之前，会获得对应的 MappedStatement 方法。例如："),t("code",[e._v("DefaultSqlSession#select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)")]),e._v(" 方法，代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// DefaultSqlSession.java\n\n@Override\npublic void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {\n    try {\n        // 获得 MappedStatement 对象\n        MappedStatement ms = configuration.getMappedStatement(statement);\n        // 执行查询\n        executor.query(ms, wrapCollection(parameter), rowBounds, handler);\n    } catch (Exception e) {\n        throw ExceptionFactory.wrapException("Error querying database.  Cause: " + e, e);\n    } finally {\n        ErrorContext.instance().reset();\n    }\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br")])]),t("ul",[t("li",[e._v("完整的流程，胖友可以慢慢撸下 MyBatis 的源码。")])])])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Mapper 接口里的方法，是不能重载的，因为是"),t("strong",[e._v("全限名 + 方法名")]),e._v("的保存和寻找策略。😈 所以有时，想个 Mapper 接口里的方法名，还是蛮闹心的，嘿嘿。")]),e._v(" "),t("h2",{attrs:{id:"mapper-接口绑定有几种实现方式-分别是怎么实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapper-接口绑定有几种实现方式-分别是怎么实现的"}},[e._v("#")]),e._v(" Mapper 接口绑定有几种实现方式,分别是怎么实现的?")]),e._v(" "),t("p",[e._v("接口绑定有三种实现方式：")]),e._v(" "),t("p",[e._v("第一种，通过 "),t("strong",[e._v("XML Mapper")]),e._v(" 里面写 SQL 来绑定。在这种情况下，要指定 XML 映射文件里面的 "),t("code",[e._v('"namespace"')]),e._v(" 必须为接口的全路径名。")]),e._v(" "),t("p",[e._v("第二种，通过"),t("strong",[e._v("注解")]),e._v("绑定，就是在接口的方法上面加上 "),t("code",[e._v("@Select")]),e._v("、"),t("code",[e._v("@Update")]),e._v("、"),t("code",[e._v("@Insert")]),e._v("、"),t("code",[e._v("@Delete")]),e._v(" 注解，里面包含 SQL 语句来绑定。")]),e._v(" "),t("p",[e._v("第三种，是第二种的特例，也是通过"),t("strong",[e._v("注解")]),e._v("绑定，在接口的方法上面加上 "),t("code",[e._v("@SelectProvider")]),e._v("、"),t("code",[e._v("@UpdateProvider")]),e._v("、"),t("code",[e._v("@InsertProvider")]),e._v("、"),t("code",[e._v("@DeleteProvider")]),e._v(" 注解，通过 Java 代码，生成对应的动态 SQL 。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("实际场景下，最最最推荐的是"),t("strong",[e._v("第一种")]),e._v("方式。因为，SQL 通过注解写在 Java 代码中，会非常杂乱。而写在 XML 中，更加有整体性，并且可以更加方便的使用 OGNL 表达式。")]),e._v(" "),t("h2",{attrs:{id:"mybatis-的-xml-mapper文件中-不同的-xml-映射文件-id-是否可以重复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-的-xml-mapper文件中-不同的-xml-映射文件-id-是否可以重复"}},[e._v("#")]),e._v(" Mybatis 的 XML Mapper文件中，不同的 XML 映射文件，id 是否可以重复？")]),e._v(" "),t("p",[e._v("不同的 XML Mapper 文件，如果配置了 "),t("code",[e._v('"namespace"')]),e._v(" ，那么 id 可以重复；如果没有配置 "),t("code",[e._v('"namespace"')]),e._v(" ，那么 id 不能重复。毕竟"),t("code",[e._v('"namespace"')]),e._v(" 不是必须的，只是最佳实践而已。")]),e._v(" "),t("p",[e._v("原因就是，"),t("code",[e._v("namespace + id")]),e._v(" 是作为 "),t("code",[e._v("Map<String, MappedStatement>")]),e._v(" 的 key 使用的。如果没有 "),t("code",[e._v('"namespace"')]),e._v("，就剩下 id ，那么 id 重复会导致数据互相覆盖。如果有了 "),t("code",[e._v('"namespace"')]),e._v("，自然 id 就可以重复，"),t("code",[e._v('"namespace"')]),e._v("不同，"),t("code",[e._v("namespace + id")]),e._v(" 自然也就不同。")]),e._v(" "),t("h2",{attrs:{id:"如何获取自动生成的-主-键值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何获取自动生成的-主-键值"}},[e._v("#")]),e._v(" 如何获取自动生成的(主)键值?")]),e._v(" "),t("p",[e._v("不同的数据库，获取自动生成的(主)键值的方式是不同的。")]),e._v(" "),t("p",[e._v("MySQL 有两种方式，但是"),t("strong",[e._v("自增主键")]),e._v("，代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 方式一，使用 useGeneratedKeys + keyProperty 属性\n<insert id="insert" parameterType="Person" useGeneratedKeys="true" keyProperty="id">\n    INSERT INTO person(name, pswd)\n    VALUE (#{name}, #{pswd})\n</insert>\n    \n// 方式二，使用 `<selectKey />` 标签\n<insert id="insert" parameterType="Person">\n    <selectKey keyProperty="id" resultType="long" order="AFTER">\n        SELECT LAST_INSERT_ID()\n    </selectKey>\n        \n    INSERT INTO person(name, pswd)\n    VALUE (#{name}, #{pswd})\n</insert>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br")])]),t("ul",[t("li",[e._v("其中，"),t("strong",[e._v("方式一")]),e._v("较为常用。")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Oracle 有两种方式，"),t("strong",[e._v("序列")]),e._v("和"),t("strong",[e._v("触发器")]),e._v("。因为自己不了解 Oracle ，所以问了银行的朋友，他们是使用"),t("strong",[e._v("序列")]),e._v("。而基于"),t("strong",[e._v("序列")]),e._v("，根据 "),t("code",[e._v("<selectKey />")]),e._v(" 执行的时机，也有两种方式，代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 这个是创建表的自增序列\nCREATE SEQUENCE student_sequence\nINCREMENT BY 1\nNOMAXVALUE\nNOCYCLE\nCACHE 10;\n\n// 方式一，使用 `<selectKey />` 标签 + BEFORE\n<insert id="add" parameterType="Student">\n　　<selectKey keyProperty="student_id" resultType="int" order="BEFORE">\n      select student_sequence.nextval FROM dual\n    </selectKey>\n    \n     INSERT INTO student(student_id, student_name, student_age)\n     VALUES (#{student_id},#{student_name},#{student_age})\n</insert>\n\n// 方式二，使用 `<selectKey />` 标签 + AFTER\n<insert id="save" parameterType="com.threeti.to.ZoneTO" >\n    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >\n      SELECT SEQ_ZONE.CURRVAL AS id FROM dual\n    </selectKey>\n    \n    INSERT INTO TBL_ZONE (ID, NAME ) \n    VALUES (SEQ_ZONE.NEXTVAL, #{name,jdbcType=VARCHAR})\n</insert>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br")])]),t("ul",[t("li",[e._v("他们使用第一种方式，没有具体原因，可能就没什么讲究吧。嘿嘿。")])]),e._v(" "),t("p",[e._v("至于为什么不用"),t("strong",[e._v("触发器")]),e._v("呢？朋友描述如下：")]),e._v(" "),t("blockquote",[t("p",[e._v("朋友：触发器不行啊，我们这边原来也有触发器，一有数据更改就会有问题了呀\n数据更改指的是？\n朋友：就改线上某几条数据\n噢噢。手动改是吧？\n朋友：不行~")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("当然，数据库还有 SQLServer、PostgreSQL、DB2、H2 等等，具体的方式，胖友自己 Google 下噢。")]),e._v(" "),t("p",[e._v("关于如何获取自动生成的(主)键值的"),t("strong",[e._v("原理")]),e._v("，可以看看 "),t("a",{attrs:{href:"http://svip.iocoder.cn/MyBatis/executor-3/",target:"_blank",rel:"noopener noreferrer"}},[e._v("《精尽 MyBatis 源码分析 —— SQL 执行（三）之 KeyGenerator》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("h2",{attrs:{id:"mybatis-执行批量插入-能返回数据库主键列表吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-执行批量插入-能返回数据库主键列表吗"}},[e._v("#")]),e._v(" Mybatis 执行批量插入，能返回数据库主键列表吗？")]),e._v(" "),t("p",[e._v("能，JDBC 都能做，Mybatis 当然也能做。")]),e._v(" "),t("h2",{attrs:{id:"在-mapper-中如何传递多个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在-mapper-中如何传递多个参数"}},[e._v("#")]),e._v(" 在 Mapper 中如何传递多个参数?")]),e._v(" "),t("p",[e._v("第一种，使用 Map 集合，装载多个参数进行传递。代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 调用方法\nMap<String, Object> map = new HashMap();\nmap.put("start", start);\nmap.put("end", end);\nreturn studentMapper.selectStudents(map);\n\n// Mapper 接口\nList<Student> selectStudents(Map<String, Object> map);\n\n// Mapper XML 代码\n<select id="selectStudents" parameterType="Map" resultType="Student">\n    SELECT * \n    FROM students \n    LIMIT #{start}, #{end}\n</select>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br")])]),t("ul",[t("li",[e._v("显然，这不是一种优雅的方式。")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("第二种，保持传递多个参数，使用 "),t("code",[e._v("@Param")]),e._v(" 注解。代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 调用方法\nreturn studentMapper.selectStudents(0, 10);\n\n// Mapper 接口\nList<Student> selectStudents(@Param("start") Integer start, @Param("end") Integer end);\n\n// Mapper XML 代码\n<select id="selectStudents" resultType="Student">\n    SELECT * \n    FROM students \n    LIMIT #{start}, #{end}\n</select>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("ul",[t("li",[e._v("推荐使用这种方式。")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("第三种，保持传递多个参数，不使用 "),t("code",[e._v("@Param")]),e._v(" 注解。代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 调用方法\nreturn studentMapper.selectStudents(0, 10);\n\n// Mapper 接口\nList<Student> selectStudents(Integer start, Integer end);\n\n// Mapper XML 代码\n<select id="selectStudents" resultType="Student">\n    SELECT * \n    FROM students \n    LIMIT #{param1}, #{param2}\n</select>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("ul",[t("li",[e._v("其中，按照参数在方法方法中的位置，从 1 开始，逐个为 "),t("code",[e._v("#{param1}")]),e._v("、"),t("code",[e._v("#{param2}")]),e._v("、"),t("code",[e._v("#{param3}")]),e._v(" 不断向下。")])]),e._v(" "),t("h2",{attrs:{id:"mybatis-是否可以映射-enum-枚举类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-是否可以映射-enum-枚举类"}},[e._v("#")]),e._v(" Mybatis 是否可以映射 Enum 枚举类？")]),e._v(" "),t("p",[e._v("Mybatis 可以映射枚举类，对应的实现类为 EnumTypeHandler 或 EnumOrdinalTypeHandler 。")]),e._v(" "),t("ul",[t("li",[e._v("EnumTypeHandler ，基于 "),t("code",[e._v("Enum.name")]),e._v(" 属性( String )。"),t("strong",[e._v("默认")]),e._v("。")]),e._v(" "),t("li",[e._v("EnumOrdinalTypeHandler ，基于 "),t("code",[e._v("Enum.ordinal")]),e._v(" 属性( "),t("code",[e._v("int")]),e._v(" )。可通过 "),t("code",[e._v('<setting name="defaultEnumTypeHandler" value="EnumOrdinalTypeHandler" />')]),e._v(" 来设置。")])]),e._v(" "),t("p",[e._v("😈 当然，实际开发场景，我们很少使用 Enum 类型，更加的方式是，代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class Dog {\n\n    public static final int STATUS_GOOD = 1;\n    public static final int STATUS_BETTER = 2;\n    public static final int STATUS_BEST = 3；\n    \n    private int status;\n    \n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("hr"),e._v(" "),t("p",[e._v("并且，不单可以映射枚举类，Mybatis 可以映射任何对象到表的一列上。映射方式为自定义一个 TypeHandler 类，实现 TypeHandler 的"),t("code",[e._v("#setParameter(...)")]),e._v(" 和 "),t("code",[e._v("#getResult(...)")]),e._v(" 接口方法。")]),e._v(" "),t("p",[e._v("TypeHandler 有两个作用：")]),e._v(" "),t("ul",[t("li",[e._v("一是，完成从 javaType 至 jdbcType 的转换。")]),e._v(" "),t("li",[e._v("二是，完成 jdbcType 至 javaType 的转换。")])]),e._v(" "),t("p",[e._v("具体体现为 "),t("code",[e._v("#setParameter(...)")]),e._v(" 和 "),t("code",[e._v("#getResult(..)")]),e._v(" 两个方法，分别代表设置 SQL 问号占位符参数和获取列查询结果。")]),e._v(" "),t("p",[e._v("关于 TypeHandler 的"),t("strong",[e._v("原理")]),e._v("，可以看看 "),t("a",{attrs:{href:"http://svip.iocoder.cn/MyBatis/type-package/",target:"_blank",rel:"noopener noreferrer"}},[e._v("《精尽 MyBatis 源码分析 —— 类型模块》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("h2",{attrs:{id:"mybatis-都有哪些-executor-执行器-它们之间的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-都有哪些-executor-执行器-它们之间的区别是什么"}},[e._v("#")]),e._v(" Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？")]),e._v(" "),t("p",[e._v("Mybatis 有四种 Executor 执行器，分别是 SimpleExecutor、ReuseExecutor、BatchExecutor、CachingExecutor 。")]),e._v(" "),t("ul",[t("li",[e._v("SimpleExecutor ：每执行一次 update 或 select 操作，就创建一个 Statement 对象，用完立刻关闭 Statement 对象。")]),e._v(" "),t("li",[e._v("ReuseExecutor ：执行 update 或 select 操作，以 SQL 作为key 查找"),t("strong",[e._v("缓存")]),e._v("的 Statement 对象，存在就使用，不存在就创建；用完后，不关闭 Statement 对象，而是放置于缓存 "),t("code",[e._v("Map<String, Statement>")]),e._v(" 内，供下一次使用。简言之，就是重复使用 Statement 对象。")]),e._v(" "),t("li",[e._v("BatchExecutor ：执行 update 操作（没有 select 操作，因为 JDBC 批处理不支持 select 操作），将所有 SQL 都添加到批处理中（通过 addBatch 方法），等待统一执行（使用 executeBatch 方法）。它缓存了多个 Statement 对象，每个 Statement 对象都是调用 addBatch 方法完毕后，等待一次执行 executeBatch 批处理。"),t("strong",[e._v("实际上，整个过程与 JDBC 批处理是相同")]),e._v("。")]),e._v(" "),t("li",[e._v("CachingExecutor ：在上述的三个执行器之上，增加"),t("strong",[e._v("二级缓存")]),e._v("的功能。")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("通过设置 "),t("code",[e._v('<setting name="defaultExecutorType" value="">')]),e._v(" 的 "),t("code",[e._v('"value"')]),e._v(" 属性，可传入 SIMPLE、REUSE、BATCH 三个值，分别使用 SimpleExecutor、ReuseExecutor、BatchExecutor 执行器。")]),e._v(" "),t("p",[e._v("通过设置 "),t("code",[e._v('<setting name="cacheEnabled" value=""')]),e._v(" 的 "),t("code",[e._v('"value"')]),e._v(" 属性为 "),t("code",[e._v("true")]),e._v(" 时，创建 CachingExecutor 执行器。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("这块的源码解析，可见 "),t("a",{attrs:{href:"http://svip.iocoder.cn/MyBatis/executor-1",target:"_blank",rel:"noopener noreferrer"}},[e._v("《精尽 MyBatis 源码分析 —— SQL 执行（一）之 Executor》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("h2",{attrs:{id:"mybatis-如何执行批量插入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-如何执行批量插入"}},[e._v("#")]),e._v(" MyBatis 如何执行批量插入?")]),e._v(" "),t("p",[e._v("首先，在 Mapper XML 编写一个简单的 Insert 语句。代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<insert id="insertUser" parameterType="String"> \n    INSERT INTO users(name) \n    VALUES (#{value}) \n</insert>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("然后，然后在对应的 Mapper 接口中，编写映射的方法。代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public interface UserMapper {\n    \n    void insertUser(@Param("name") String name);\n\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("最后，调用该 Mapper 接口方法。代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('private static SqlSessionFactory sqlSessionFactory;\n\n@Test\npublic void testBatch() {\n    // 创建要插入的用户的名字的数组\n    List<String> names = new ArrayList<>();\n    names.add("占小狼");\n    names.add("朱小厮");\n    names.add("徐妈");\n    names.add("飞哥");\n\n    // 获得执行器类型为 Batch 的 SqlSession 对象，并且 autoCommit = false ，禁止事务自动提交\n    try (SqlSession session = sqlSessionFactory.openSession(ExecutorType.BATCH, false)) {\n        // 获得 Mapper 对象\n        UserMapper mapper = session.getMapper(UserMapper.class);\n        // 循环插入\n        for (String name : names) {\n            mapper.insertUser(name);\n        }\n        // 提交批量操作\n        session.commit();\n    }\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br")])]),t("p",[e._v("代码比较简单，胖友仔细看看。当然，还有另一种方式，代码如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("INSERT INTO [表名]([列名],[列名]) \nVALUES\n([列值],[列值])),\n([列值],[列值])),\n([列值],[列值]));\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("ul",[t("li",[e._v("对于这种方式，需要保证单条 SQL 不超过语句的最大限制 "),t("code",[e._v("max_allowed_packet")]),e._v(" 大小，默认为 1 M 。")])]),e._v(" "),t("p",[e._v("这两种方式的性能对比，可以看看 [《"),t("a",{attrs:{href:"https://www.jianshu.com/p/cce617be9f9e",target:"_blank",rel:"noopener noreferrer"}},[e._v("实验]mybatis批量插入方式的比较》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("h2",{attrs:{id:"介绍-mybatis-的一级缓存和二级缓存的概念和实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-mybatis-的一级缓存和二级缓存的概念和实现原理"}},[e._v("#")]),e._v(" 介绍 MyBatis 的一级缓存和二级缓存的概念和实现原理？")]),e._v(" "),t("p",[e._v("内容有些长，直接参见 "),t("a",{attrs:{href:"https://tech.meituan.com/mybatis_cache.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("《聊聊 MyBatis 缓存机制》"),t("OutboundLink")],1),e._v(" 一文。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("这块的源码解析，可见 "),t("a",{attrs:{href:"http://svip.iocoder.cn/MyBatis/cache-package",target:"_blank",rel:"noopener noreferrer"}},[e._v("《精尽 MyBatis 源码分析 —— 缓存模块》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("h2",{attrs:{id:"mybatis-是否支持延迟加载-如果支持-它的实现原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-是否支持延迟加载-如果支持-它的实现原理是什么"}},[e._v("#")]),e._v(" Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？")]),e._v(" "),t("p",[e._v("Mybatis 仅支持 association 关联对象和 collection 关联集合对象的延迟加载。其中，association 指的就是"),t("strong",[e._v("一对一")]),e._v("，collection 指的就是"),t("strong",[e._v("一对多查询")]),e._v("。")]),e._v(" "),t("p",[e._v("在 Mybatis 配置文件中，可以配置 "),t("code",[e._v('<setting name="lazyLoadingEnabled" value="true" />')]),e._v(" 来启用延迟加载的功能。默认情况下，延迟加载的功能是"),t("strong",[e._v("关闭")]),e._v("的。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("它的原理是，使用 CGLIB 或 Javassist( 默认 ) 创建目标对象的代理对象。当调用代理对象的延迟加载属性的 getting 方法时，进入拦截器方法。比如调用 "),t("code",[e._v("a.getB().getName()")]),e._v(" 方法，进入拦截器的 "),t("code",[e._v("invoke(...)")]),e._v(" 方法，发现 "),t("code",[e._v("a.getB()")]),e._v(" 需要延迟加载时，那么就会单独发送事先保存好的查询关联 B 对象的 SQL ，把 B 查询上来，然后调用"),t("code",[e._v("a.setB(b)")]),e._v(" 方法，于是 "),t("code",[e._v("a")]),e._v(" 对象 "),t("code",[e._v("b")]),e._v(" 属性就有值了，接着完成"),t("code",[e._v("a.getB().getName()")]),e._v(" 方法的调用。这就是延迟加载的基本原理。")]),e._v(" "),t("p",[e._v("当然了，不光是 Mybatis，几乎所有的包括 Hibernate 在内，支持延迟加载的原理都是一样的。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("这块的源码解析，可见 "),t("a",{attrs:{href:"http://svip.iocoder.cn/MyBatis/executor-5",target:"_blank",rel:"noopener noreferrer"}},[e._v("《 精尽 MyBatis 源码分析 —— SQL 执行（五）之延迟加载》"),t("OutboundLink")],1),e._v(" 文章。")]),e._v(" "),t("h2",{attrs:{id:"mybatis-能否执行一对一、一对多的关联查询吗-都有哪些实现方式-以及它们之间的区别。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-能否执行一对一、一对多的关联查询吗-都有哪些实现方式-以及它们之间的区别。"}},[e._v("#")]),e._v(" Mybatis 能否执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。")]),e._v(" "),t("blockquote",[t("p",[e._v("这道题有点难度。理解倒是好理解，主要那块源码的实现，看的有点懵逼。大体的意思是懂的，但是一些细节没扣完。")])]),e._v(" "),t("p",[e._v("能，Mybatis 不仅可以执行一对一、一对多的关联查询，还可以执行多对一，多对多的关联查询。")]),e._v(" "),t("blockquote",[t("p",[e._v("不过貌似，我自己实际开发中，还是比较喜欢自己去查询和拼接映射的数据。😈")])]),e._v(" "),t("ul",[t("li",[e._v("多对一查询，其实就是一对一查询，只需要把 "),t("code",[e._v("selectOne(...)")]),e._v(" 修改为 "),t("code",[e._v("selectList(...)")]),e._v(" 即可。案例可见 "),t("a",{attrs:{href:"https://blog.csdn.net/xzm_rainbow/article/details/15336959",target:"_blank",rel:"noopener noreferrer"}},[e._v("《MyBatis：多对一表关系详解》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("li",[e._v("多对多查询，其实就是一对多查询，只需要把 "),t("code",[e._v("#selectOne(...)")]),e._v(" 修改为 "),t("code",[e._v("selectList(...)")]),e._v(" 即可。案例可见 "),t("a",{attrs:{href:"https://blog.csdn.net/eson_15/article/details/51655188",target:"_blank",rel:"noopener noreferrer"}},[e._v("《【MyBatis学习10】高级映射之多对多查询》"),t("OutboundLink")],1),e._v(" 。")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("关联对象查询，有两种实现方式：")]),e._v(" "),t("blockquote",[t("p",[e._v("所有的技术方案，即会有好处，又会有坏处。很难出现，一个完美的银弹方案。")])]),e._v(" "),t("ul",[t("li",[e._v("一种是单独发送一个 SQL 去查询关联对象，赋给主对象，然后返回主对象。好处是多条 SQL 分开，相对简单，坏处是发起的 SQL 可能会比较多。")]),e._v(" "),t("li",[e._v("另一种是使用嵌套查询，嵌套查询的含义为使用 "),t("code",[e._v("join")]),e._v(" 查询，一部分列是 A 对象的属性值，另外一部分列是关联对象 B 的属性值。好处是只发一个 SQL 查询，就可以把主对象和其关联对象查出来，坏处是 SQL 可能比较复杂。")])]),e._v(" "),t("p",[e._v("那么问题来了，"),t("code",[e._v("join")]),e._v(" 查询出来 100 条记录，如何确定主对象是 5 个，而不是 100 个呢？其去重复的原理是 "),t("code",[e._v("<resultMap>")]),e._v(" 标签内的"),t("code",[e._v("<id>")]),e._v(" 子标签，指定了唯一确定一条记录的 "),t("code",[e._v("id")]),e._v(" 列。Mybatis 会根据"),t("code",[e._v("<id>")]),e._v(" 列值来完成 100 条记录的去重复功能，"),t("code",[e._v("<id>")]),e._v(" 可以有多个，代表了联合主键的语意。")]),e._v(" "),t("p",[e._v("同样主对象的关联对象，也是根据这个原理去重复的。尽管一般情况下，只有主对象会有重复记录，关联对象一般不会重复。例如：下面 "),t("code",[e._v("join")]),e._v(" 查询出来6条记录，一、二列是 Teacher 对象列，第三列为 Student 对象列。Mybatis 去重复处理后，结果为 1 个老师和 6 个学生，而不是 6 个老师和 6 个学生。")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[e._v("t_id")]),e._v(" "),t("th",{staticStyle:{"text-align":"left"}},[e._v("t_name")]),e._v(" "),t("th",{staticStyle:{"text-align":"left"}},[e._v("s_id")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("teacher")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("38")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("teacher")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("39")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("teacher")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("40")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("teacher")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("41")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("teacher")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("42")])]),e._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("1")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("teacher")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("43")])])])]),e._v(" "),t("h2",{attrs:{id:"简述-mybatis-的插件运行原理-以及如何编写一个插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简述-mybatis-的插件运行原理-以及如何编写一个插件"}},[e._v("#")]),e._v(" 简述 Mybatis 的插件运行原理？以及如何编写一个插件？")]),e._v(" "),t("p",[e._v("Mybatis 仅可以编写针对 ParameterHandler、ResultSetHandler、StatementHandler、Executor 这 4 种接口的插件。")]),e._v(" "),t("p",[e._v("Mybatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 "),t("code",[e._v("#invoke(...)")]),e._v("方法。当然，只会拦截那些你指定需要拦截的方法。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("编写一个 MyBatis 插件的步骤如下：")]),e._v(" "),t("ol",[t("li",[e._v("首先，实现 Mybatis 的 Interceptor 接口，并实现 "),t("code",[e._v("#intercept(...)")]),e._v(" 方法。")]),e._v(" "),t("li",[e._v("然后，在给插件编写注解，指定要拦截哪一个接口的哪些方法即可")]),e._v(" "),t("li",[e._v("最后，在配置文件中配置你编写的插件。")])]),e._v(" "),t("p",[e._v("具体的，可以参考 "),t("a",{attrs:{href:"http://www.mybatis.org/mybatis-3/zh/configuration.html#plugins",target:"_blank",rel:"noopener noreferrer"}},[e._v("《MyBatis 官方文档 —— 插件》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("插件的详细解析，可以看看 "),t("a",{attrs:{href:"http://svip.iocoder.cn/MyBatis/plugin-1",target:"_blank",rel:"noopener noreferrer"}},[e._v("《精尽 MyBatis 源码分析 —— 插件体系（一）之原理》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("h2",{attrs:{id:"mybatis-是如何进行分页的-分页插件的原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-是如何进行分页的-分页插件的原理是什么"}},[e._v("#")]),e._v(" Mybatis 是如何进行分页的？分页插件的原理是什么？")]),e._v(" "),t("p",[e._v("Mybatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的"),t("strong",[e._v("内存分页")]),e._v("，而非"),t("strong",[e._v("数据库分页")]),e._v("。")]),e._v(" "),t("p",[e._v("所以，实际场景下，不适合直接使用 MyBatis 原有的 RowBounds 对象进行分页。而是使用如下两种方案：")]),e._v(" "),t("ul",[t("li",[e._v("在 SQL 内直接书写带有数据库分页的参数来完成数据库分页功能")]),e._v(" "),t("li",[e._v("也可以使用分页插件来完成数据库分页。")])]),e._v(" "),t("p",[e._v("这两者都是基于数据库分页，差别在于前者是工程师"),t("strong",[e._v("手动")]),e._v("编写分页条件，后者是插件"),t("strong",[e._v("自动")]),e._v("添加分页条件。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("分页插件的基本原理是使用 Mybatis 提供的插件接口，实现自定义分页插件。在插件的拦截方法内，拦截待执行的 SQL ，然后重写 SQL ，根据dialect 方言，添加对应的物理分页语句和物理分页参数。")]),e._v(" "),t("p",[e._v("举例："),t("code",[e._v("SELECT * FROM student")]),e._v(" ，拦截 SQL 后重写为："),t("code",[e._v("select * FROM student LIMI 0，10")]),e._v(" 。")]),e._v(" "),t("p",[e._v("目前市面上目前使用比较广泛的 MyBatis 分页插件有：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/pagehelper/Mybatis-PageHelper",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mybatis-PageHelper"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/baomidou/mybatis-plus",target:"_blank",rel:"noopener noreferrer"}},[e._v("MyBatis-Plus"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("从现在看来，"),t("a",{attrs:{href:"https://github.com/baomidou/mybatis-plus",target:"_blank",rel:"noopener noreferrer"}},[e._v("MyBatis-Plus"),t("OutboundLink")],1),e._v(" 逐步使用的更加广泛。")]),e._v(" "),t("p",[e._v("关于 MyBatis 分页插件的原理深入，可以看看 "),t("a",{attrs:{href:"http://svip.iocoder.cn/MyBatis/plugin-2",target:"_blank",rel:"noopener noreferrer"}},[e._v("《精尽 MyBatis 源码分析 —— 插件体系（二）之 PageHelper》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("h2",{attrs:{id:"mybatis-与-hibernate-有哪些不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-与-hibernate-有哪些不同"}},[e._v("#")]),e._v(" MyBatis 与 Hibernate 有哪些不同？")]),e._v(" "),t("p",[e._v("Mybatis 和 Hibernate 不同，它"),t("strong",[e._v("不完全是")]),e._v("一个 ORM 框架，因为MyBatis 需要程序员自己编写 SQL 语句。不过 MyBatis 可以通过 XML 或注解方式灵活配置要运行的 SQL 语句，并将 Java 对象和 SQL 语句映射生成最终执行的 SQL ，最后将 SQL 执行的结果再映射生成 Java 对象。")]),e._v(" "),t("p",[e._v("Mybatis 学习门槛低，简单易学，程序员直接编写原生态 SQL ，可严格控制 SQL 执行性能，灵活度高。但是灵活的前提是 MyBatis 无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套 SQL 映射文件，工作量大。")]),e._v(" "),t("p",[e._v("Hibernate 对象/关系映射能力强，数据库无关性好。如果用 Hibernate 开发可以节省很多代码，提高效率。但是 Hibernate 的缺点是学习门槛高，要精通门槛更高，而且怎么设计 O/R 映射，在性能和对象模型之间如何权衡，以及怎样用好 Hibernate 需要具有很强的经验和能力才行。")]),e._v(" "),t("p",[e._v("总之，按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好的软件架构都是好架构，所以框架只有适合才是最好。简单总结如下：")]),e._v(" "),t("ul",[t("li",[e._v("Hibernate 属于全自动 ORM 映射工具，使用 Hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取。")]),e._v(" "),t("li",[e._v("Mybatis 属于半自动 ORM 映射工具，在查询关联对象或关联集合对象时，需要手动编写 SQL 来完成。")])]),e._v(" "),t("p",[e._v("另外，在 "),t("a",{attrs:{href:"https://www.jianshu.com/p/96171e647885",target:"_blank",rel:"noopener noreferrer"}},[e._v("《浅析 Mybatis 与 Hibernate 的区别与用途》"),t("OutboundLink")],1),e._v(" 文章，也是写的非常不错的。")]),e._v(" "),t("p",[e._v("当然，实际上，MyBatis 也可以搭配自动生成代码的工具，提升开发效率，还可以使用 "),t("a",{attrs:{href:"http://mp.baomidou.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("MyBatis-Plus"),t("OutboundLink")],1),e._v(" 框架，已经内置常用的 SQL 操作，也是非常不错的。")]),e._v(" "),t("h2",{attrs:{id:"jdbc-编程有哪些不足之处-mybatis是如何解决这些问题的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdbc-编程有哪些不足之处-mybatis是如何解决这些问题的"}},[e._v("#")]),e._v(" JDBC 编程有哪些不足之处，MyBatis是如何解决这些问题的？")]),e._v(" "),t("p",[e._v("问题一：SQL 语句写在代码中造成代码不易维护，且代码会比较混乱。")]),e._v(" "),t("p",[e._v("解决方式：将 SQL 语句配置在 Mapper XML 文件中，与 Java 代码分离。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("问题二：根据参数不同，拼接不同的 SQL 语句非常麻烦。例如 SQL 语句的 WHERE 条件不一定，可能多也可能少，占位符需要和参数一一对应。")]),e._v(" "),t("p",[e._v("解决方式：MyBatis 提供 "),t("code",[e._v("<where />")]),e._v("、"),t("code",[e._v("<if />")]),e._v(" 等等动态语句所需要的标签，并支持 OGNL 表达式，简化了动态 SQL 拼接的代码，提升了开发效率。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("问题三，对结果集解析麻烦，SQL 变化可能导致解析代码变化，且解析前需要遍历。")]),e._v(" "),t("p",[e._v("解决方式：Mybatis 自动将 SQL 执行结果映射成 Java 对象。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("问题四，数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。")]),e._v(" "),t("p",[e._v("解决方式：在 "),t("code",[e._v("mybatis-config.xml")]),e._v(" 中，配置数据链接池，使用连接池管理数据库链接。")]),e._v(" "),t("p",[e._v("😈 当然，即使不使用 MyBatis ，也可以使用数据库连接池。\n另外，MyBatis 默认提供了数据库连接池的实现，只是说，因为其它开源的数据库连接池性能更好，所以一般很少使用 MyBatis 自带的连接池实现。")]),e._v(" "),t("h2",{attrs:{id:"mybatis-比-ibatis-比较大的几个改进是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-比-ibatis-比较大的几个改进是什么"}},[e._v("#")]),e._v(" Mybatis 比 IBatis 比较大的几个改进是什么？")]),e._v(" "),t("blockquote",[t("p",[e._v("这是一个选择性了解的问题，因为可能现在很多面试官，都没用过 IBatis 框架。")])]),e._v(" "),t("ol",[t("li",[e._v("有接口绑定，包括注解绑定 SQL 和 XML 绑定 SQL 。")]),e._v(" "),t("li",[e._v("动态 SQL 由原来的节点配置变成 OGNL 表达式。")]),e._v(" "),t("li",[e._v("在一对一或一对多的时候，引进了 "),t("code",[e._v("association")]),e._v(" ，在一对多的时候，引入了 "),t("code",[e._v("collection")]),e._v("节点，不过都是在 "),t("code",[e._v("<resultMap />")]),e._v(" 里面配置。")])]),e._v(" "),t("h2",{attrs:{id:"mybatis-映射文件中-如果-a-标签通过-include-引用了b标签的内容-请问-b-标签能否定义在-a-标签的后面-还是说必须定义在a标签的前面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-映射文件中-如果-a-标签通过-include-引用了b标签的内容-请问-b-标签能否定义在-a-标签的后面-还是说必须定义在a标签的前面"}},[e._v("#")]),e._v(" Mybatis 映射文件中，如果 A 标签通过 include 引用了B标签的内容，请问，B 标签能否定义在 A 标签的后面，还是说必须定义在A标签的前面？")]),e._v(" "),t("blockquote",[t("p",[e._v("老这道题目，已经和源码实现，有点关系了。")])]),e._v(" "),t("p",[e._v("虽然 Mybatis 解析 XML 映射文件是"),t("strong",[e._v("按照顺序")]),e._v("解析的。但是，被引用的 B 标签依然可以定义在任何地方，Mybatis 都可以正确识别。"),t("strong",[e._v("也就是说，无需按照顺序，进行定义")]),e._v("。")]),e._v(" "),t("p",[e._v("原理是，Mybatis 解析 A 标签，发现 A 标签引用了 B 标签，但是 B 标签尚未解析到，尚不存在，此时，Mybatis 会将 A 标签标记为"),t("strong",[e._v("未解析状态")]),e._v("。然后，继续解析余下的标签，包含 B 标签，待所有标签解析完毕，Mybatis 会重新解析那些被标记为未解析的标签，此时再解析A标签时，B 标签已经存在，A 标签也就可以正常解析完成了。")]),e._v(" "),t("p",[e._v("可能有一些绕，胖友可以看看 "),t("a",{attrs:{href:"http://svip.iocoder.cn/MyBatis/builder-package-1",target:"_blank",rel:"noopener noreferrer"}},[e._v("《精尽 MyBatis 源码解析 —— MyBatis 初始化（一）之加载 mybatis-config》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("p",[e._v("此处，我们在引申一个问题，Spring IOC 中，存在互相依赖的 Bean 对象，该如何解决呢？答案见 "),t("a",{attrs:{href:"http://svip.iocoder.cn/Spring/IoC-get-Bean-createBean-5/",target:"_blank",rel:"noopener noreferrer"}},[e._v("《【死磕 Spring】—— IoC 之加载 Bean：创建 Bean（五）之循环依赖处理》"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("h2",{attrs:{id:"简述-mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简述-mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系"}},[e._v("#")]),e._v(" 简述 Mybatis 的 XML 映射文件和 Mybatis 内部数据结构之间的映射关系？")]),e._v(" "),t("blockquote",[t("p",[e._v("老这道题目，已经和源码实现，有点关系了。")])]),e._v(" "),t("p",[e._v("Mybatis 将所有 XML 配置信息都封装到 All-In-One 重量级对象Configuration内部。")]),e._v(" "),t("p",[e._v("在 XML Mapper 文件中：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("<parameterMap>")]),e._v(" 标签，会被解析为 ParameterMap 对象，其每个子元素会被解析为 ParameterMapping 对象。")]),e._v(" "),t("li",[t("code",[e._v("<resultMap>")]),e._v(" 标签，会被解析为 ResultMap 对象，其每个子元素会被解析为 ResultMapping 对象。")]),e._v(" "),t("li",[e._v("每一个 "),t("code",[e._v("<select>")]),e._v("、"),t("code",[e._v("<insert>")]),e._v("、"),t("code",[e._v("<update>")]),e._v("、"),t("code",[e._v("<delete>")]),e._v(" 标签，均会被解析为一个 MappedStatement 对象，标签内的 SQL 会被解析为一个 BoundSql 对象。")])]),e._v(" "),t("h2",{attrs:{id:"参考与推荐如下文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考与推荐如下文章"}},[e._v("#")]),e._v(" 参考与推荐如下文章：")]),e._v(" "),t("ul",[t("li",[e._v("祖大俊 "),t("a",{attrs:{href:"https://my.oschina.net/zudajun/blog/747682",target:"_blank",rel:"noopener noreferrer"}},[e._v("《Mybatis3.4.x技术内幕（二十三）：Mybatis面试问题集锦（大结局）》"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Java3y "),t("a",{attrs:{href:"https://segmentfault.com/a/1190000013678579",target:"_blank",rel:"noopener noreferrer"}},[e._v("《Mybatis 常见面试题》"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("Homiss "),t("a",{attrs:{href:"https://github.com/Homiss/Java-interview-questions/blob/master/%E6%A1%86%E6%9E%B6/MyBatis%E9%9D%A2%E8%AF%95%E9%A2%98.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("《MyBatis 面试题》"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);